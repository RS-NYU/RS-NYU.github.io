window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.570%20--%3E%2000:00:06.299%0D%0AOkay,%20so%20we\u0027ve%20got%20the%20string%20literals.%0D%0ALet\u0027s%20talk%20about%20operators%20that%20we%20can%0D%0A%0D%0A00:00:06.300%20--%3E%2000:00:11.550%0D%0Aapply%20over%20strings.%20So%20obviously%20we%20have%0D%0Athe%20plus%20operator%20and%20the%20multiplication%0D%0A%0D%0A00:00:11.551%20--%3E%2000:00:17.700%0D%0Aoperator.%20You%20know%20we%20can%20add%20strings%0D%0Athat%20would%20concatenate%20them%20ABC%20plus%0D%0A%0D%0A00:00:17.701%20--%3E%2000:00:24.180%0D%0ADEF%20would%20create%20a%20new%20string%20with%20a%0D%0Avalue%20ABCDEF.%20So,%20concatenation:%20you%20can%0D%0A%0D%0A00:00:24.181%20--%3E%2000:00:28.650%0D%0Aadd%20two%20strings%20to%20one%20another.%20You%0D%0Acannot%20add,%20as%20we%20know,%20a%20string%20to%20an%0D%0A%0D%0A00:00:28.651%20--%3E%2000:00:33.210%0D%0Ainteger%20or%20a%20string%20to%20a%20float.%20We%20cannot%0D%0Asubtract%20strings,%20but%20adding%20a%20string%20to%0D%0A%0D%0A00:00:33.211%20--%3E%2000:00:38.970%0D%0Aa%20string,%20that\u0027s%20valid.%20Also%20we\u0027ve%20talked%0D%0Aabout%20the%20multiplication%20operator%20where%0D%0A%0D%0A00:00:38.971%20--%3E%2000:00:44.460%0D%0Ayou%20can%20duplicate%20a%20string%20some%20number%0D%0Aof%20times.%20So%20for%20example,%20you%20can%20have%20ABC%0D%0A%0D%0A00:00:44.461%20--%3E%2000:00:51.110%0D%0Atimes%203.%20That%20would%20create%20a%20new%20string%0D%0Acontaining%20ABC%20ABC%20ABC,%20three%20duplicates%20of%0D%0A%0D%0A00:00:51.111%20--%3E%2000:00:57.120%0D%0AABC.%20So%20again%20we%20can%20duplicate%20or%0D%0Amultiply%20a%20string%20by%20an%20integer%20or%20an%0D%0A%0D%0A00:00:57.121%20--%3E%2000:01:02.220%0D%0Ainteger%20by%20a%20string.%20Obviously%20we%20cannot%0D%0Amultiply%20a%20string%20by%20a%20string%20or%20a%0D%0A%0D%0A00:01:02.221%20--%3E%2000:01:06.690%0D%0Astring%20by%20a%20float,%20but%20taking%20a%20string%0D%0Aand%20multiplying%20it%20by%20an%20int,%20that%20is%0D%0A%0D%0A00:01:06.691%20--%3E%2000:01:12.300%0D%0Avalid.%20So%20we\u0027ve%20already%20spoken%20about%0D%0Athese%20two%20operators%20-%20the%20plus%20and%20the%0D%0A%0D%0A00:01:12.301%20--%3E%2000:01:18.570%0D%0Amultiplication.%20Let\u0027s%20try%20to%20focus%20on%20relational%20operators%20where%20we%20can%0D%0A%0D%0A00:01:18.571%20--%3E%2000:01:25.080%0D%0Acompare%20strings%20to%20one%20another.%20So%20for%0D%0Aexample,%20if%20we%20have%20s1%20as%20the%20string%20ABC%0D%0A%0D%0A00:01:25.081%20--%3E%2000:01:32.100%0D%0Aand%20s2%20is%20the%20string%20DE,%20we%20can%20then%0D%0Acompare%20them.%20For%20example,%20we%20can%20query%0D%0A%0D%0A00:01:32.101%20--%3E%2000:01:37.860%0D%0Awhether%20s1%20equals%20s2.%20In%20this%20case,%0D%0Aobviously%20they%20are%20not%20equal%20to%20one%0D%0A%0D%0A00:01:37.861%20--%3E%2000:01:42.930%0D%0Aanother.%20So%20we\u0027re%20expecting%20to%20get%20a%0D%0Afalse%20value%20back%20here.%20So%20yeah.%20We%20can%0D%0A%0D%0A00:01:42.931%20--%3E%2000:01:47.310%0D%0Acompare%20strings%20to%20one%20another%20whether%0D%0Athey\u0027re%20equal%20or%20not.%20We%20can%20obviously%0D%0A%0D%0A00:01:47.311%20--%3E%2000:01:52.710%0D%0Aask%20whether%20s1%20is%20not%20equal%20to%20s2.%20In%0D%0Athis%20case%20it%20would%20be%20true%20because%20ABC%0D%0A%0D%0A00:01:52.711%20--%3E%2000:01:59.520%0D%0Ais%20not%20equal%20to%20DE.%20So%20obviously%20we%20can%0D%0Acompare%20double%20equals%20or%20explanation%0D%0A%0D%0A00:01:59.521%20--%3E%2000:02:06.540%0D%0Amark%20equals,%20but%20what%20do%20you%20think:%20can%20we%0D%0Acompare%20strings%20s1%20is%20less%20than%20s2,%20just%0D%0A%0D%0A00:02:06.541%20--%3E%2000:02:10.859%0D%0Aas%20we%20can%20do%20with%20numerical%20types,%20as%20we%0D%0Acan%20do%20with%20integers?%20Obviously%20with%0D%0A%0D%0A00:02:10.860%20--%3E%2000:02:14.400%0D%0Aintegers%20we%20can%20ask%20whether%20one%20integer%0D%0Aequals%20to%20the%20other%20or%0D%0A%0D%0A00:02:14.401%20--%3E%2000:02:18.510%0D%0Aone%20integer%20is%20not%20equal%20to%20the%20other,%0D%0Abut%20we%20can%20also%20ask%20if%20one%20integer%20is%0D%0A%0D%0A00:02:18.511%20--%3E%2000:02:23.129%0D%0Aless%20than%20the%20other.%20And%20it%20makes%20perfect%0D%0Asense.%20I%20didn\u0027t%20need%20to%20say%20any%20word%0D%0A%0D%0A00:02:23.130%20--%3E%2000:02:29.099%0D%0Aabout%20that%20because%20we%20know%20what%204%20%0D%0A%0D%0A00:02:29.100%20--%3E%2000:02:34.409%0D%0ABut%20can%20we%20do%20the%20same%20for%20strings?%0D%0ACan%20we%20ask%20whether%20ABC%20is%20less%20than%20DE?%0D%0A%0D%0A00:02:34.410%20--%3E%2000:02:40.290%0D%0AIs%20that%20valid?%20And%20if%20it%20is,%20what%20meaning%0D%0Adoes%20it%20have?%20In%20what%20sense%20does%20it%0D%0A%0D%0A00:02:40.291%20--%3E%2000:02:48.720%0D%0Acompare%20s1%20to%20s2,%20if%20s1%20is%20less%20than%20s2?%0D%0ASo%20first%20let%20me%20say%20that%20we%20can%20compare%0D%0A%0D%0A00:02:48.721%20--%3E%2000:02:53.970%0D%0Astrings,%20whether%20one%20string%20is%20less%20than%0D%0Athe%20other.%20But%20by%20which%20criteria%20is%20this%0D%0A%0D%0A00:02:53.971%20--%3E%2000:03:02.189%0D%0Acomparison%20done?%20Maybe%20is%20it%20done%20if%20the%0D%0Alength%20of%20s1%20is%20less%20than%20the%20length%20of%0D%0A%0D%0A00:03:02.190%20--%3E%2000:03:07.950%0D%0As2?%20In%20this%20case%20ABC%20is%20a%20three-length%0D%0Astring%20where%20DE%20is%20a%20two-length%20string.%0D%0A%0D%0A00:03:07.951%20--%3E%2000:03:14.370%0D%0AIn%20this%20case,%203%20is%20not%20less%20than%202,%20so%0D%0Awe\u0027re%20expecting%20false%20here.%20Let\u0027s%20try%20to%0D%0A%0D%0A00:03:14.371%20--%3E%2000:03:19.319%0D%0Aput%20it%20in%20a%20larger%20context%20and%20then%0D%0AI\u0027ll%20tell%20you%20how%20do%20we%20really%20compare%0D%0A%0D%0A00:03:19.320%20--%3E%2000:03:23.970%0D%0Astrings.%20So%20let\u0027s%20add%20an%20if%20statement%0D%0Ahere:%20if%20s1%20is%20less%20than%20s2.%20Let\u0027s%20just%0D%0A%0D%0A00:03:23.971%20--%3E%2000:03:30.299%0D%0Aprint%20in%20that%20case%20that%20s1%20is%20smaller%0D%0Athan%20s2.%20Otherwise%20we\u0027ll%20just%20print%20that%0D%0A%0D%0A00:03:30.300%20--%3E%2000:03:37.250%0D%0As1%20is%20not%20smaller%20than%20s2.%20If%20we%20try%0D%0Ato%20run,%20to%20execute%20this%20instruction,%0D%0A%0D%0A00:03:37.251%20--%3E%2000:03:44.129%0D%0Asurprisingly%20or%20not,%20we\u0027ll%20get%20the%20result%0D%0Athat%20ABC%20is%20smaller%20than%20DE,%20or%20in%20other%0D%0A%0D%0A00:03:44.130%20--%3E%2000:03:52.379%0D%0Awords,%20that%20s1%20is%20less%20than%20a%20s2,%20or%20ABC%0D%0Ais%20less%20than%20DE.%20So%20it%20seems%20that%20when%0D%0A%0D%0A00:03:52.380%20--%3E%2000:03:58.949%0D%0APython%20compares%20strings%20it%20doesn\u0027t%0D%0Acompare%20them%20by%20length,%20right?%20Because%20if%0D%0A%0D%0A00:03:58.950%20--%3E%2000:04:04.019%0D%0Ait%20would%20compare%20them%20by%20length,%20ABC%0D%0Awouldn\u0027t%20be%20less%20than%20DE,%20right?%20So%20it%20has%0D%0A%0D%0A00:04:04.020%20--%3E%2000:04:09.989%0D%0Asome%20other%20criteria%20to%20compare%20strings%0D%0Ato%20one%20another.%20Let%20me%20just%20tell%0D%0A%0D%0A00:04:09.990%20--%3E%2000:04:15.030%0D%0Ayou%20how%20strings%20are%20compared.%20So%0D%0Agenerally%20speaking,%20strings%20are%20compared%0D%0A%0D%0A00:04:15.031%20--%3E%2000:04:20.880%0D%0Ain%20their%20alphabetical%20order.%20We%20say%20it\u0027s%0D%0Acompared%20by%20lexicographical%20order.%20In%0D%0A%0D%0A00:04:20.881%20--%3E%2000:04:26.610%0D%0Athis%20case%20ABC%20is%20alphabetically%20less%0D%0Athan%20DE,%20right?%20If%20we%20put%20both%20of%20these%0D%0A%0D%0A00:04:26.611%20--%3E%2000:04:31.020%0D%0Avalues%20in%20a%20dictionary,%0D%0AABC%20would%20come%20before%20DE,%20so%20ABC%20is%20less%0D%0A%0D%0A00:04:31.021%20--%3E%2000:04:37.919%0D%0Athan,%20is%20smaller%20than%20DE.%20And%20that\u0027s%0D%0Awhy%20in%20this%20case%20we%20got%20that%20that%20s1%20is%0D%0A%0D%0A00:04:37.920%20--%3E%2000:04:45.110%0D%0Aless%20than%20s2%20is%20true,%20where%20the%0D%0Aprintout%20was%20s1%20is%20smaller%20than%20s2.%20And%0D%0A%0D%0A00:04:45.111%20--%3E%2000:04:52.229%0D%0Aif%20we%20want%20to%20describe%20it%20in%20more%20detail,%0D%0Awhen%20Python%20compares%20two%20strings%20-%20let\u0027s%0D%0A%0D%0A00:04:52.230%20--%3E%2000:05:00.750%0D%0Asay%20the%20string%20ABCDEFG%20versus%20ABCDXYZ%20-%0D%0Athe%20way%20it%20works%20is%20something%20like%20that.%0D%0A%0D%0A00:05:00.751%20--%3E%2000:05:07.020%0D%0AIt%20goes%20over%20these%20two%20strings%0D%0Asimultaneously.%20It%20starts%20comparing%20A%20to%0D%0A%0D%0A00:05:07.021%20--%3E%2000:05:12.120%0D%0AA,%20which%20they\u0027re%20equal,%20so%20it%20goes%20to%20the%0D%0Anext%20position.%20B%20and%20B%20are%20equal%20to%20one%0D%0A%0D%0A00:05:12.121%20--%3E%2000:05:15.630%0D%0Aanother.%20It%20keeps%20on%20moving%20until%20it%20finds%0D%0Athe%20first%20location%20where%20they%20differ%0D%0A%0D%0A00:05:15.631%20--%3E%2000:05:19.440%0D%0Afrom%20one%20another.%20So%20B%20and%20B%20are%20equal%20to%0D%0Aone%20another,%0D%0A%0D%0A00:05:19.441%20--%3E%2000:05:24.810%0D%0AC%20and%20C%20are%20equal%20to%20one%20another,%20D%20and%20D%20are%0D%0Aequal%20to%20one%20another,%20and%20E%20and%20X%20-%20that\u0027s%0D%0A%0D%0A00:05:24.811%20--%3E%2000:05:28.349%0D%0Athe%20first%20position%20where%20they%20differ%20from%20one%20another.%0D%0A%0D%0A00:05:28.350%20--%3E%2000:05:33.960%0D%0AThat\u0027s%20where%20Python%20would%20determine%0D%0Awhether%20the%20first%20string%20is%20less%20than%0D%0A%0D%0A00:05:33.961%20--%3E%2000:05:39.000%0D%0Athe%20second%20string.%20Then%20what%20Python%20does%0D%0Abasically,%20and%20it\u0027s%20the%20same%20in%20other%0D%0A%0D%0A00:05:39.001%20--%3E%2000:05:43.199%0D%0Aprogramming%20languages%20as%20well,%20is%0D%0Abasically%20comparing%20the%20ASCII%20value%20of%0D%0A%0D%0A00:05:43.200%20--%3E%2000:05:48.510%0D%0Athese%20two%20first%20characters%20that%20are%0D%0Adifferent%20for%20one%20another.%20In%20this%20case%0D%0A%0D%0A00:05:48.511%20--%3E%2000:05:55.260%0D%0Ait%20compares%20the%20E%20versus%20the%20X%20and%20the%0D%0AASCII%20value%20of%20E%20is%20less%20than%20the%20ASCII%0D%0A%0D%0A00:05:55.261%20--%3E%2000:05:58.919%0D%0Avalue%20of%20X.%20That\u0027s%20why%20the%20entire%20first%0D%0Astring%0D%0A%0D%0A00:05:58.920%20--%3E%2000:06:07.320%0D%0AABCDEFG%20is%20less%20than%20the%20entire%20second%0D%0Astring%20ABCDXYZ.%20So%20in%20this%20case%20we%20got%0D%0A%0D%0A00:06:07.321%20--%3E%2000:06:14.909%0D%0Athat%20it%20is%20less%20than%20the%20second%20one.%20Same%0D%0Athing%20with%20our%20ABC%20and%20DE.%20So%20we%20can%0D%0A%0D%0A00:06:14.910%20--%3E%2000:06:19.470%0D%0Acompare%20whether%20two%20strings%20are%20equal%20to%0D%0Aone%20another,%20whether%20they%20are%0D%0A%0D%0A00:06:19.471%20--%3E%2000:06:24.680%0D%0Anot%20equal%20to%20one%20another,%20whether%20one%0D%0Astring%20is%20less%20than%20the%20other.%20And%0D%0A%0D%0A00:06:24.681%20--%3E%2000:06:29.550%0D%0Asimilarly,%20we%20can%20also%20compare%20whether%0D%0Aone%20string%20is%20greater%20than%20another,%0D%0A%0D%0A00:06:29.551%20--%3E%2000:06:34.979%0D%0Alesser,%20equal,%20greater%20or%20equal,%20and%20so%20on.%0D%0ASo%20we%20can%20apply%20relational%20operators%0D%0A%0D%0A00:06:34.980%20--%3E%2000:06:37.184%0D%0Aover%20strings%20as%20well.%0D%0A%0D%0A"}')