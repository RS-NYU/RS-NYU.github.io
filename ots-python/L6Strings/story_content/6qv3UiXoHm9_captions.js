window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:01.819%20--%3E%2000:00:07.970%0D%0AOkay,%20so%20a%20very%20important%20property%20of%0D%0Astrings%20is%20the%20fact%20that%20they%20are%0D%0A%0D%0A00:00:07.971%20--%3E%2000:00:14.599%0D%0Asequential%20collections.%20We\u0027ve%20said%20that%0D%0Astrings%20are%20a%20sequence%20of%20characters,%20but%0D%0A%0D%0A00:00:14.600%20--%3E%2000:00:18.759%0D%0Athe%20fact%20that%20there%20are%20sequential%0D%0Acollections%20allows%20us%20to%20access%0D%0A%0D%0A00:00:18.760%20--%3E%2000:00:26.239%0D%0Aindividual%20characters%20from%20the%20string.%20We%0D%0Ado%20that%20by%20the%20indexing%20syntax.%20Let%20me%0D%0A%0D%0A00:00:26.240%20--%3E%2000:00:32.000%0D%0Ashow%20you%20how%20it%20works.%20So%20for%20example,%0D%0Alet\u0027s%20assume%20we%20have%20a%20string%20s%20that%0D%0A%0D%0A00:00:32.001%20--%3E%2000:00:37.970%0D%0Aequals%20or%20that%20has%0D%0AABCDEFG,%20basically%20it%20means%20that%20in%20our%0D%0A%0D%0A00:00:37.971%20--%3E%2000:00:42.670%0D%0Amemory%20we%20have%20a%20variable%20s%20referencing%0D%0Aa%20sequence%20of%20characters%0D%0A%0D%0A00:00:42.671%20--%3E%2000:00:49.460%0D%0AABCDEFG.%20Obviously%20we%20don\u0027t%20have%20these%0D%0Acharacters%20written%20in%20the%20memory%20as%20we%0D%0A%0D%0A00:00:49.461%20--%3E%2000:00:54.890%0D%0Ajust%20drew%20it.%20We%20have%20their%20ASCII%0D%0Avalue,%20there%20but%20logically%20that%20is%0D%0A%0D%0A00:00:54.891%20--%3E%2000:01:00.230%0D%0Awhat%20we%20have%20there:%20a%20sequence%20of%20these%0D%0Acharacters.%20And%20we%20know%20that%20for%20this%0D%0A%0D%0A00:01:00.231%20--%3E%2000:01:07.550%0D%0Astring%20we%20can%20ask%20what%20the%20value%20of%20s%20is.%0D%0AThat%20would%20return%20the%20string%20%22ABCDEFG%22.%0D%0A%0D%0A00:01:07.551%20--%3E%2000:01:14.540%0D%0AWe%20can%20figure%20out%20what\u0027s%20the%20length%0D%0Aof%20s%20by%20calling%20the%20len(s)%20expression%20and%0D%0A%0D%0A00:01:14.541%20--%3E%2000:01:20.299%0D%0Athat%20would%20return%20seven.%20But%20let\u0027s%20see%0D%0Ahow%20we%20can%20access%20specific%20characters%0D%0A%0D%0A00:01:20.300%20--%3E%2000:01:25.850%0D%0Afrom%20the%20string.%20The%20syntax%20for%20that%0D%0Awould%20be%20something%20along%20these%20lines.%20So%0D%0A%0D%0A00:01:25.851%20--%3E%2000:01:31.940%0D%0Ait%20works%20something%20like%20that.%20S%20and%20then%0D%0Aenclosed%20in%20square%20brackets%20we%20give%20some%0D%0A%0D%0A00:01:31.941%20--%3E%2000:01:38.180%0D%0Aindex%20position%20to%20the%20characters%20in%20the%0D%0Astring,%20for%20example%20s[1].%20Can%20you%20guess%20what%0D%0A%0D%0A00:01:38.181%20--%3E%2000:01:45.409%0D%0As[1]%20would%20evaluate%20to?%20You%20probably%0D%0Aguessed%20that%20it%20evaluates%20to%20the%0D%0A%0D%0A00:01:45.410%20--%3E%2000:01:53.330%0D%0Acharacter%20in%20the%20first%20position.%20Actually%0D%0Ait%20doesn\u0027t%20return%20A%20back,%20as%0D%0A%0D%0A00:01:53.331%20--%3E%2000:01:58.939%0D%0Aone%20could%20expect.%20It%20basically%20returns%20B,%0D%0Aand%20that%20is%20because%20the%20indices%20of%0D%0A%0D%0A00:01:58.940%20--%3E%2000:02:06.710%0D%0Athe%20string%20are%200-based,%20basically%20meaning%0D%0Athat%20the%20first%20character%20is%20index%200,%20the%0D%0A%0D%0A00:02:06.711%20--%3E%2000:02:12.230%0D%0Asecond%20character%20is%20index%201,%20the%20third%0D%0Aone%20is%20index%202,%20and%20so%20on.%20So%20s[1]%20basically%0D%0A%0D%0A00:02:12.231%20--%3E%2000:02:18.590%0D%0Astands%20for%20the%20second%20slot%20of%0D%0Athis%20string.%20So%20it%20would%20basically%20return%0D%0A%0D%0A00:02:18.591%20--%3E%2000:02:23.840%0D%0AB%20as%20a%20result.%20So%20it\u0027s%20the%20second%0D%0Acharacter%20of%20the%20string.%20We%20can%20go%20ahead%0D%0A%0D%0A00:02:23.841%20--%3E%2000:02:30.340%0D%0Aand%20figure%20out%20what%20s[0]%20is.%20That%20would%20be%0D%0AA%20in%20this%20case.%20If%20we%20will%20try%20to%20access%0D%0A%0D%0A00:02:30.341%20--%3E%2000:02:37.060%0D%0As[10],%20which%20is%20obviously%20out%20of%20the%20range%0D%0Aof%20the%20characters%20in%20a%20string%20s,%20as%0D%0A%0D%0A00:02:37.061%20--%3E%2000:02:42.980%0D%0Aexpected,%20we\u0027ll%20get%20an%20error%20message%0D%0Asaying,%20%22string%20index%20out%20of%20range%22,%20which%0D%0A%0D%0A00:02:42.981%20--%3E%2000:02:50.540%0D%0Ais%20an%20obvious%20error%20in%20this%20case.%20So%0D%0Abasically%20we%20can%20access%20the%20individual%0D%0A%0D%0A00:02:50.541%20--%3E%2000:02:56.900%0D%0Acharacters%20by%20using%20the%20indexing%20syntax%0D%0Aof%20square%20brackets%20and%20giving%20the%0D%0A%0D%0A00:02:56.901%20--%3E%2000:03:03.919%0D%0Aindex%20of%20that%20specific%20character,%20zero-based%0D%0Aindex.%20Let\u0027s%20try%20another%20thing.%20Let\u0027s%20go%0D%0A%0D%0A00:03:03.920%20--%3E%2000:03:08.989%0D%0Aahead.%20Again,%20let\u0027s%20say%20s%20is%20ABCDEFG.%0D%0AAgain%20we%20have%20in%20our%20memory%20the%20variable%0D%0A%0D%0A00:03:08.990%20--%3E%2000:03:15.609%0D%0As%20referencing%20this%20string%20here.%20What%20do%0D%0Ayou%20think%20would%20happen%20if%20we%20access%20s[2]?%0D%0A%0D%0A00:03:15.610%20--%3E%2000:03:21.260%0D%0AThat%20would%20return%20C.%20What%20do%20you%20think%0D%0Awould%20happen%20if%20we\u0027ll%20access%20s%20[-1]?%0D%0A%0D%0A00:03:21.261%20--%3E%2000:03:31.069%0D%0AMy%20first%20guess%20was%20obviously%20an%20error,%0D%0Abut%20apparently%20Python%20supports%20two%20kinds%0D%0A%0D%0A00:03:31.070%20--%3E%2000:03:39.650%0D%0Aof%20indexing%20mechanisms.%20The%20one%20is%20the%0D%0Azero-based%20system%20which%20gives%20a%20non-%0D%0A%0D%0A00:03:39.651%20--%3E%2000:03:45.709%0D%0Anegative%20index%20to%20the%20characters.%20The%0D%0Asecond%20system%20of%20indexing%20would%20be%20a%0D%0A%0D%0A00:03:45.710%20--%3E%2000:03:51.620%0D%0Anegative%20system%20basically%20saying%20that%0D%0Athe%20last%20character%20would%20be%20index%0D%0A%0D%0A00:03:51.621%20--%3E%2000:03:56.810%0D%0A-1,%20the%20second%20last%20would%20be%0D%0Aindex%20-2.%20and%20so%20on.%20So%20s[-1]%0D%0A%0D%0A00:03:56.811%20--%3E%2000:04:05.239%0D%0Awould%20just%20return%20the%20G%20here,%20which%20is%0D%0Athe%20last%20character.%20So%20we%20can%20either%0D%0A%0D%0A00:04:05.240%20--%3E%2000:04:10.400%0D%0Aaccess%20the%20string%20characters%20using%20the%0D%0Azero-based%20system,%20the%20non-negative%0D%0A%0D%0A00:04:10.401%20--%3E%2000:04:17.060%0D%0Aindexing%20system,%20or%20we%20can%20use%20the%0D%0Anegative%20indexing%20system%20to%20access%20the%0D%0A%0D%0A00:04:17.061%20--%3E%2000:04:22.940%0D%0Astring%20characters,%20but%20then%20it%20would%20go%0D%0Afrom%20the%20back.%20So%20yeah,%20again%20s[-1]%0D%0A%0D%0A00:04:22.941%20--%3E%2000:04:29.520%0D%0Awould%20be%20this%20G%20here.%20s[-3]?%20If%0D%0Awe%20look%20here%20we\u0027ll%20get%20back%20E.%0D%0A%0D%0A00:04:29.521%20--%3E%2000:04:36.990%0D%0As[-10]?%20Once%20again,%20that%0D%0Awould%20be%20an%20error%20saying%20a%20string%20index%0D%0A%0D%0A00:04:36.991%20--%3E%2000:04:44.759%0D%0Aout%20of%20range.%20So%20if%20we%20want%20to%20access%20the%0D%0Aindividual%20characters%20from%20the%20string,%20we%0D%0A%0D%0A00:04:44.760%20--%3E%2000:04:51.509%0D%0Acan%20use%20the%20indexing%20syntax%20of%20just%0D%0Asupplying%20the%20index%20either%20zero-based%0D%0A%0D%0A00:04:51.510%20--%3E%2000:04:57.000%0D%0Aindex%20or%20negative%20index%20and%20closed%20in%0D%0Asquare%20brackets.%20Okay,%20so%20we%20can%20use%0D%0A%0D%0A00:04:57.001%20--%3E%2000:05:01.319%0D%0Aindexing%20in%20order%20to%20get%20a%20specific%0D%0Acharacter%20out%20of%20a%20string.%20Actually,%20if%0D%0A%0D%0A00:05:01.320%20--%3E%2000:05:06.630%0D%0Ayou%20recall,%20it%20returns%20a%20sub-string%0D%0Aor%20a%20string%20of%20length%20one,%20which%20is%20the%0D%0A%0D%0A00:05:06.631%20--%3E%2000:05:13.069%0D%0Asingle%20character%20in%20that%20specific%0D%0Aposition.%20We%20can%20also%20use%20a%20more%20advanced%0D%0A%0D%0A00:05:13.070%20--%3E%2000:05:20.699%0D%0Aindexing%20or%20a%20more%20advanced%20technique%0D%0Awhere%20we%20can%20get%20a%20substring%20out%20of%20a%0D%0A%0D%0A00:05:20.700%20--%3E%2000:05:27.419%0D%0Astring,%20basically%20to%20slice%20out%20a%20greater%0D%0Apart%20of%20a%20string.%20That%20is%20a%20slicing%0D%0A%0D%0A00:05:27.420%20--%3E%2000:05:32.190%0D%0Aand%20let%20me%20show%20you%20the%20syntax,%20how%20this%0D%0Athing%20here%20works.%20So%20once%20again%20let\u0027s%0D%0A%0D%0A00:05:32.191%20--%3E%2000:05:36.930%0D%0Aassume%20we%20have%20a%20string%20s%20ABCDEFG.%20We%0D%0Ahave%20in%20our%20memory%20a%20variable%20s%0D%0A%0D%0A00:05:36.931%20--%3E%2000:05:42.990%0D%0Areferencing%20this%20string%20here.%20We%20can%20use%0D%0Athe%20indexing%20syntax%20in%20order%20to%0D%0A%0D%0A00:05:42.991%20--%3E%2000:05:48.779%0D%0Aget%20a%20specific%20character.%20s[1]%20would%0D%0Areturn%20B.%20Again%20note%20that%20B%20is%20a%20string%0D%0A%0D%0A00:05:48.780%20--%3E%2000:05:54.240%0D%0Aof%20length%20one.%20We%20can%20use%20the%20slicing%0D%0Asyntax%20that%20works%20something%20like%20that.%20We%0D%0A%0D%0A00:05:54.241%20--%3E%2000:06:01.110%0D%0Acan%20ask%20to%20slice%20out%20s%20one%20through%20four.%0D%0AThe%20syntax%20is%20s%20and%20then%20in%20square%0D%0A%0D%0A00:06:01.111%20--%3E%2000:06:08.699%0D%0Abrackets%20we%20give%20the%20start%20and%20end%0D%0Aposition%20with%20colons%20in%20between%20them.%20So%0D%0A%0D%0A00:06:08.700%20--%3E%2000:06:14.699%0D%0Aone%20through%20four,%20you%20would%20probably%0D%0Aguess,%20would%20return%20BCDE.%20If%20we%20try%20it%0D%0A%0D%0A00:06:14.700%20--%3E%2000:06:21.150%0D%0Aout,%20we\u0027ll%20be%20a%20bit%20surprised%20because%20it%0D%0Areturns%20BCD.%20And%20that%20is%20because%20Python%0D%0A%0D%0A00:06:21.151%20--%3E%2000:06:31.349%0D%0Auses%20an%20half-open%20interval%20idea%20where%0D%0Athe%20starting%20index%20is%20included%20in%20the%0D%0A%0D%0A00:06:31.350%20--%3E%2000:06:40.050%0D%0Arange,%20but%20the%20ending%20index%20is%20excluded.%0D%0ASo%20it%20goes%20one%20through%20four%20without%20the%0D%0A%0D%0A00:06:40.051%20--%3E%2000:06:43.490%0D%0Afour%20position.%20So%20in%20this%20case%20it%20would%0D%0Ajust%20return%0D%0A%0D%0A00:06:43.491%20--%3E%2000:06:52.280%0D%0ABCD.%20These%20are%20the%20indices%20that%20are%20in%0D%0Athis%20half-open%20range.%20So%20we%20have%20s[1:4],%0D%0A%0D%0A00:06:52.281%20--%3E%2000:06:59.810%0D%0Athat%20would%20be%20BCD.%20If%20we%20will%0D%0Ado%20s[0:4]?%20So%20it%20would%20include%20the%0D%0A%0D%0A00:06:59.811%20--%3E%2000:07:11.229%0D%0A0,%20exclude%20the%204,%20and%20we\u0027ll%20slice%20out%20the%0D%0Asubstring%20ABCD,%20right?%20There%20is%20a%20form,%0D%0A%0D%0A00:07:11.230%20--%3E%2000:07:18.050%0D%0Ashort%20form%20for%20this%20syntax.%20We%20can%20omit%0D%0Athe%20starting%20index%20and%20do%20something%20like%0D%0A%0D%0A00:07:18.051%20--%3E%2000:07:25.099%0D%0As,%20nothing%20basically,%20colons,%20four.%20Just%0D%0Awrite%20a%20space%20or%20just%20not%20write%20anything.%0D%0A%0D%0A00:07:25.100%20--%3E%2000:07:32.780%0D%0AThat%20stands%20for,%20by%20default,%20from%20the%0D%0Abeginning%20up%20to%204.%20So%20saying%20s[%20:4]%0D%0A%0D%0A00:07:32.781%20--%3E%2000:07:39.050%0D%0Abasically%20is%20the%20same%20as%20saying%20s[0:4].%20So%20s[%20:4]%20basically%0D%0A%0D%0A00:07:39.051%20--%3E%2000:07:49.759%0D%0Ajust%20returns%20ABCD.%20Again%20we%20can%20do%20s%204%0D%0Athrough%20length%20of%20s.%20So%20the%20length%20of%20s%0D%0A%0D%0A00:07:49.760%20--%3E%2000:07:58.370%0D%0Ahere%20is%207,%20going%204%20through%207,%20would%20be%20the%0D%0Ahalf-open%20interval%20starting%20at%204,%20ending%20at%0D%0A%0D%0A00:07:58.371%20--%3E%2000:08:02.780%0D%0A7,%20without%20the%207.%20Basically%20going%204%0D%0Athrough%206.%0D%0A%0D%0A00:08:02.781%20--%3E%2000:08:10.580%0D%0AThat%20would%20be%20EFG.%20Again,%20there%20is%20a%20short%0D%0Aform%20for%20this%20expression%20by%20omitting%20the%0D%0A%0D%0A00:08:10.581%20--%3E%2000:08:20.060%0D%0Aending%20argument.%20That%20means%20that%20it%20goes%0D%0Afrom%204%20through%20the%20end.%20So%20writing%20s,%20four,%0D%0A%0D%0A00:08:20.061%20--%3E%2000:08:26.990%0D%0Acolons,%20and%20then%20nothing,%20basically%20stands%0D%0Afor%20the%20same%20expression%20as%20s,%20four%20through%0D%0A%0D%0A00:08:26.991%20--%3E%2000:08:33.709%0D%0Athe%20length.%20So%20that%20also%20returns%20EFG.%20And%0D%0Aif%20we%20can%20combine%20these%20two%20short%20forms%0D%0A%0D%0A00:08:33.710%20--%3E%2000:08:38.510%0D%0Atogether,%20we%20can%20just%20do%20s,%20and%20then%20in%0D%0Asquare%20brackets,%20colons,%20without%20starting%0D%0A%0D%0A00:08:38.511%20--%3E%2000:08:42.919%0D%0Aor%20an%20ending.%20Basically%20standing%20for%0D%0Astarting%20at%20the%20beginning,%20ending%20at%20the%0D%0A%0D%0A00:08:42.920%20--%3E%2000:08:47.329%0D%0Aend.%20And%20that%20would%20be%20the%20entire%20string%0D%0Aitself,%0D%0A%0D%0A00:08:47.330%20--%3E%2000:08:53.060%0D%0AABCDEFG.%20One%20thing,%20one%20last%20thing%20I%20want%0D%0Ato%20mention%20here:%20When%20we%20are%20slicing%20out%0D%0A%0D%0A00:08:53.061%20--%3E%2000:08:57.740%0D%0Aa%20string,%20basically%20we%20are%20creating%20a%20new%0D%0Astring%20instance%0D%0A%0D%0A00:08:57.741%20--%3E%2000:09:03.860%0D%0Ain%20our%20memory%20containing%20these,%20or%0D%0Athis%20new%20sub-string%20of%20the%20original%0D%0A%0D%0A00:09:03.861%20--%3E%2000:09:10.420%0D%0Astring.%20So%20for%20sequential%20properties%20we%0D%0Acan%20either%20index%20a%20specific%20character%0D%0A%0D%0A00:09:10.421%20--%3E%2000:09:16.130%0D%0Afrom%20a%20string%20or%20we%20can%20slice%20out%20a%20sub-string%20of%20a%20string,%20either%20by%20using%0D%0A%0D%0A00:09:16.131%20--%3E%2000:09:20.128%0D%0Athe%20indexing%20syntax%20or%20the%20slicing%0D%0Asyntax.%0D%0A%0D%0A"}')