window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.10.13923.0%0D%0A%0D%0A00:00:00.780%20--%3E%2000:00:04.630%0D%0AOkay,%20so%20integer%20objects%20represent%20integer%0D%0Anumbers.%0D%0A%0D%0A00:00:04.631%20--%3E%2000:00:08.349%0D%0AWe%20use%20the%20two\u0027s%20complement%20representation%0D%0Amethod%20in%20order%20to%20do%20that.%0D%0A%0D%0A00:00:08.350%20--%3E%2000:00:12.980%0D%0ALet\u0027s%20talk%20about%20the%20built-in%20Python%20literals%0D%0Athat%20are%20considered%20to%20be%20integers.%0D%0A%0D%0A00:00:12.981%20--%3E%2000:00:18.290%0D%0AActually,%20let%20me%20try%20to%20first%20explain%20what%0D%0Aliterals%20are.%0D%0A%0D%0A00:00:18.291%20--%3E%2000:00:26.290%0D%0ASo%20when%20we%20are%20talking%20about%20data,%20we%20like%0D%0Ato%20think%20of%20two%20major%20forms%20of%20data.%0D%0A%0D%0A00:00:26.291%20--%3E%2000:00:30.580%0D%0AThere%20are%20variables%20and%20there%20are%20the%20literals.%0D%0A%0D%0A00:00:30.581%20--%3E%2000:00:35.190%0D%0AVariables%20would%20be%20X,%20Y,%20whatever%20we%20choose%0D%0Ato%20name%20these%20variables.%0D%0A%0D%0A00:00:35.191%20--%3E%2000:00:45.410%0D%0AThe%20literals%20are%20built%20in%20things%20we%20can%20write%0D%0Aand%20they%20can%20consider%20to%20be%20integers%20in%20this%0D%0A%0D%0A00:00:45.411%20--%3E%2000:00:46.410%0D%0Acase.%0D%0A%0D%0A00:00:46.411%20--%3E%2000:00:51.449%0D%0ASo%20for%20example,%20a%206,%20negative%206,%20we%20don\u0027t%0D%0Aneed%20to%20define%20what%206%20is.%0D%0A%0D%0A00:00:51.450%20--%3E%2000:00:57.710%0D%0AIt\u0027s%20built%20in%20inside%20of%20Python%20and%20they%20are%0D%0Aconsidered%20in%20this%20case%20to%20be%20an%20integer.%0D%0A%0D%0A00:00:57.711%20--%3E%2000:01:04.010%0D%0ABy%20the%20way,%207.3%20is%20also%20a%20thing%20we%20can%20just%0D%0Ause,%20we%20don\u0027t%20need%20to%20define%20what%207.3%20is,%0D%0A%0D%0A00:01:04.011%20--%3E%2000:01:09.980%0D%0Abut%207.3%20won\u0027t%20be%20considered%20not%20an%20integer%0D%0Aliteral,%20but%20a%20float%20literal.%0D%0A%0D%0A00:01:09.981%20--%3E%2000:01:12.950%0D%0ASame%20as%20the%20string%20abc.%0D%0A%0D%0A00:01:12.951%20--%3E%2000:01:17.079%0D%0AWe%20don\u0027t%20need%20to%20define%20what%20abc%20is,%20we%20can%0D%0Ajust%20use%20it.%0D%0A%0D%0A00:01:17.080%20--%3E%2000:01:22.869%0D%0AIt\u0027s%20built%20in%20in%20Python,%20it\u0027s%20a%20Python%20literal%0D%0Aof%20type%20string%20in%20this%20case.%0D%0A%0D%0A00:01:22.870%20--%3E%2000:01:31.670%0D%0ASo%20for%20example%20when%20we%20have%20an%20assignment%0D%0AX%20equals%206,%20X%20is%20a%20variable,%206%20is%20literal,%0D%0A%0D%0A00:01:31.671%20--%3E%2000:01:39.960%0D%0Aand%20Python%20uses%20these%20two%20things%20in%20order%0D%0Ato%20be%20considered%20as%20data.%0D%0A%0D%0A00:01:39.961%20--%3E%2000:01:44.540%0D%0ALet%20me%20elaborate%20on%20that%20a%20bit%20more.%0D%0A%0D%0A00:01:44.541%20--%3E%2000:01:46.439%0D%0AFor%20example,%2012.%0D%0A%0D%0A00:01:46.440%20--%3E%2000:01:48.359%0D%0AThat\u0027s%20a%20valid%20expression%20in%20Python.%0D%0A%0D%0A00:01:48.360%20--%3E%2000:01:53.840%0D%0AThe%20value%20of%20this%20expression%20is%2012,%20that\u0027s%0D%0Aa%20Python%20literal%20of%20type%20integer,%20right.%0D%0A%0D%0A00:01:53.841%20--%3E%2000:01:59.619%0D%0AWe%20can%20ask%20what%20the%20type%20of%2012%20and%20the%20response%0D%0Awould%20be%20an%20integer.%0D%0A%0D%0A00:01:59.620%20--%3E%2000:02:05.850%0D%0AFor%20example%20we%20can%20have%20X%20equals%2013,%20that\u0027s%0D%0Aalso%20a%20valid%20expression.%0D%0A%0D%0A00:02:05.851%20--%3E%2000:02:08.460%0D%0AThe%20value%20of%20X%20is%2013.%0D%0A%0D%0A00:02:08.461%20--%3E%2000:02:11.780%0D%0AAnd%20the%20type%20of%20X%20is%20an%20integer%20as%20well.%0D%0A%0D%0A00:02:11.781%20--%3E%2000:02:21.120%0D%0AYou%20can%20see%20that%20in%20this%20few%20lines%20of%20code,%0D%0Awe%20used%20two%20kinds%20of%20data%20that%20are%20considered%0D%0A%0D%0A00:02:21.121%20--%3E%2000:02:22.379%0D%0Ato%20be%20integer.%0D%0A%0D%0A00:02:22.380%20--%3E%2000:02:27.420%0D%0AThe%20literals,%20in%20this%20case%2012,%20and%20a%20variable,%0D%0Ain%20this%20case%20X.%0D%0A%0D%0A00:02:27.421%20--%3E%2000:02:31.280%0D%0AWe%20don\u0027t%20need%20to%20define%20what%2012%20is,%20we%20can%0D%0Ajust%20use%20it.%0D%0A%0D%0A00:02:31.281%20--%3E%2000:02:38.569%0D%0AWe%20do%20need%20to%20say%20what%20X%20is,%20we%20can\u0027t%20just%0D%0Atry%20to%20evaluate%20the%20value%20of%20X%20without%20assigning%0D%0A%0D%0A00:02:38.570%20--%3E%2000:02:42.040%0D%0Aa%20value%20to%20it%20beforehand,%20right.%0D%0A%0D%0A00:02:42.041%20--%3E%2000:02:50.180%0D%0ABut%20after%20assigning%20X%20to%2013,%20we%20can%20obviously%0D%0Aaccess%20that%20data%20and%20try%20to%20find%20what\u0027s%20the%0D%0A%0D%0A00:02:50.181%20--%3E%2000:02:53.170%0D%0Atype%20of%20that%20data%20is.%0D%0A%0D%0A00:02:53.171%20--%3E%2000:03:00.099%0D%0AFor%20the%20Python%20literals%20that%20are%20considered%0D%0Ato%20be%20integers,%20we%20just%20use%20the%20decimal%20presentation%0D%0A%0D%0A00:03:00.100%20--%3E%2000:03:07.080%0D%0Aof%20them%20and%20Python%20automatically%20considers%0D%0Athem%20to%20be%20of%20type%20integers,%20so%20we%20can%20type%0D%0A%0D%0A00:03:07.081%20--%3E%2000:03:11.209%0D%0A3,%204,%20-6,%203954,%20or%20whatever.%0D%0A%0D%0A00:03:11.210%20--%3E%2000:03:14.319%0D%0AThey\u0027re%20all%20built-in%20in%20Python%20and%20considered%0D%0Ato%20be%20integers.%0D%0A%0D%0A"}')