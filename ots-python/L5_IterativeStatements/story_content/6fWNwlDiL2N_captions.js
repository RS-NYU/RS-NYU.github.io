window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14180.0%0D%0A%0D%0A00:00:01.100%20--%3E%2000:00:11.760%0D%0AOK%20so%20let\u0027s%20try%20to%20implement%20the%20counting%20problem%20where%20we%20want%20to%20count%20from%20one%20up%20to%20an%20input%20value%20using%20a%20for%20loop%0D%0A%0D%0A00:00:12.090%20--%3E%2000:00:12.890%0D%0Athis%20time.%0D%0A%0D%0A00:00:13.630%20--%3E%2000:00:19.010%0D%0ASo%20obviously%20the%20beginning%20of%20the%20program%20would%20be%20exactly%20the%20same;%0D%0A%0D%0A00:00:19.020%20--%3E%2000:00:25.940%0D%0Awe\u0027ll%20ask%20the%20user%20for%20positive%20integer%20then%20we\u0027ll%20read%20whatever%20the%20user%20enters%20into%20a%20variable%20name%20for%20example%0D%0A%0D%0A00:00:25.941%20--%3E%2000:00:32.130%0D%0AinputNum%20and%20then%20we\u0027ll%20print,%20have%20a%20print%20statement%20repeated%20over%20and%20over,%0D%0A%0D%0A00:00:32.360%20--%3E%2000:00:35.000%0D%0Abut%20this%20time%20we\u0027ll%20use%20a%20for%20loop%20to%20do%20that.%0D%0A%0D%0A00:00:35.280%20--%3E%2000:00:40.880%0D%0ASo%20we\u0027ll%20have%20a%20statement%20looking%20something%20like%20for%20something%20in%20somewhere.%0D%0A%0D%0A00:00:42.150%20--%3E%2000:00:51.370%0D%0AWe%20don\u0027t%20know%20any%20iterable%20collections%20yet,%20let%20me%20introduce%20the%20first%20and%20very%20useful%20iterable%20collection.%0D%0A%0D%0A00:00:52.990%20--%3E%2000:01:01.190%0D%0ALater%20on%20we\u0027ll%20see%20some%20more%20iterable%20collections%20that%20are%20valid%20and%20OK%20to%20use%20in%20Python.%0D%0A%0D%0A00:01:01.590%20--%3E%2000:01:06.220%0D%0ASo%20the%20first%20iterable%20collection%20that%20I%20want%20to%20introduce%20to%20you%20would%20be%20the%20range%20function,%0D%0A%0D%0A00:01:06.221%20--%3E%2000:01:08.000%0D%0Aa%20call%20to%20the%20range%20function.%0D%0A%0D%0A00:01:08.001%20--%3E%2000:01:16.180%0D%0AOnce%20we%20call%20the%20range%20function%20with%20two%20arguments%20let\u0027s%20say%20one%20and%20in%20this%20case%20inputNum%20plus%20one,%0D%0A%0D%0A00:01:16.490%20--%3E%2000:01:21.120%0D%0Athat%20would%20allow%20us%20to%20iterate%20over%20the%20integers%20in%20that%20range.%0D%0A%0D%0A00:01:21.500%20--%3E%2000:01:31.440%0D%0ASo%20for%20example%20if%20we%20assume%20inputNum%20is%20three%20we\u0027re%20basically%20calling%20range%20with%20the%20parameters%20one%20through%20four%20so%0D%0A%0D%0A00:01:31.450%20--%3E%2000:01:36.660%0D%0Athat%20would%20allow%20us%20to%20iterate%20over%20the%20integers%20in%20the%20range%20one%20through%20four.%0D%0A%0D%0A00:01:37.060%20--%3E%2000:01:49.480%0D%0AThe%20thing%20is%20in%20Python%20a%20very%20common%20structure%20is%20to%20use%20a%20half%20open%20interval%20concept%20where%0D%0A%0D%0A00:01:49.490%20--%3E%2000:01:56.850%0D%0Awhen%20we%20are%20defining%20a%20range%20it%20will%20include%20the%20beginning%20of%20the%20range%20but%20exclude%20the%20end%20of%20the%20range,%0D%0A%0D%0A00:01:57.120%20--%3E%2000:02:01.040%0D%0Aso%20once%20we%20are%20calling%20range%20one%20through%20four,%0D%0A%0D%0A00:02:01.500%20--%3E%2000:02:11.800%0D%0Ait%20would%20basically%20create%20a%20range%20of%20integers%20going%20from%20one%20including%20the%20one%20up%20to%20inputNum%20plus%20one%0D%0A%0D%0A00:02:11.950%20--%3E%2000:02:16.670%0D%0Abut%20excluding%20that.%20So%20basically%20the%20last%20value%20we\u0027re%20going%20to%20iterate%20over%20would%20be%20the%20inputNum%20itself.%0D%0A%0D%0A00:02:17.230%20--%3E%2000:02:25.240%0D%0ASo%20by%20calling%20range%20one%20and%20inputNum%20plus%20one%20that%20would%20create%20an%20iterable%20collection%20containing%20the%20integers,%0D%0A%0D%0A00:02:25.590%20--%3E%2000:02:31.250%0D%0Asequence%20of%20integers%20one%20two%20three%20up%20to%20inputNum%20itself.%0D%0A%0D%0A00:02:32.000%20--%3E%2000:02:36.250%0D%0AAnd%20that\u0027s%20great%20because%20that\u0027s%20basically%20the%20values%20we%20want%20to%20print.%0D%0A%0D%0A00:02:37.430%20--%3E%2000:02:39.840%0D%0AThat\u0027s%20basically%20the%20values%20we%20want%20to%20iterate%20over.%0D%0A%0D%0A00:02:40.410%20--%3E%2000:02:47.800%0D%0ALet\u0027s%20have%20a%20variable%20to%20store%20these%20values%20each%20iteration%20let\u0027s%20call%20it%20counter,%20let\u0027s%20name%20it%20counter%20in%20this%20case,%0D%0A%0D%0A00:02:48.070%20--%3E%2000:02:59.570%0D%0Aand%20then%20the%20body%20would%20just%20be%20printing%20the%20value%20of%20counter.%20Let\u0027s%20go%20ahead%20and%20trace%20this%20execution.%0D%0A%0D%0A00:03:00.240%20--%3E%2000:03:04.520%0D%0ASo%20once%20again%20we%20have%20this%20arrow%20showing%20us%20exactly%20where%20we%20are%20at,%0D%0A%0D%0A00:03:04.760%20--%3E%2000:03:14.170%0D%0Aso%20we%20are%20starting%20with%20asking%20the%20user%20to%20please%20enter%20a%20positive%20integer%20the%20user%20would%20then,%20for%20example%20read,%0D%0A%0D%0A00:03:15.990%20--%3E%2000:03:25.280%0D%0Atype%20the%20value%20three%20and%20this%20three%20would%20be%20stored%20in%20inputNum%20so%20inputNum%20would%20reference%20this%20three%20and%20then%0D%0A%0D%0A00:03:25.290%20--%3E%2000:03:33.660%0D%0Awhen%20we%20are%20executing%20the%20for%20loop%20basically%20we\u0027re%20ranging%20over%20one%20through%20inputNum%20plus%20one,%20four,%0D%0A%0D%0A00:03:33.960%20--%3E%2000:03:37.730%0D%0Athat%20would%20create%20a%20collection%20of%20the%20values%20one%20two%20and%20three.%0D%0A%0D%0A00:03:37.970%20--%3E%2000:03:44.070%0D%0AAgain%20it\u0027s%20half%20open,%20four%20is%20not%20included%20in%20the%20range%20so%20it%20goes%20one%20two%20and%20three.%0D%0A%0D%0A00:03:44.390%20--%3E%2000:03:51.620%0D%0AFirst%20iteration%20counter%20would%20be%20initialized%20to%20one,%20first%20element%20in%20this%20range%20in%20this%20collection,%0D%0A%0D%0A00:03:52.080%20--%3E%2000:03:58.270%0D%0Aand%20then%20the%20body%20would%20be%20executed%20printing%20the%20value%20of%20counter%20basically%20printing%20one.%0D%0A%0D%0A00:03:59.250%20--%3E%2000:04:05.260%0D%0ANext%20iteration%20counter%20would%20get%20the%20second%20value%20in%20this%20collection%20which%20would%20be%20two,%0D%0A%0D%0A00:04:05.460%20--%3E%2000:04:09.020%0D%0Aso%20counter%20would%20change%20its%20value%20to%20two%0D%0A%0D%0A00:04:09.390%20--%3E%2000:04:16.230%0D%0Aand%20then%20the%20body%20would%20be%20executed%20given%20that%20value%20of%20counter%20so%20once%20we%20print%20counter%20it%20would%20basically%20print%20two.%0D%0A%0D%0A00:04:16.810%20--%3E%2000:04:23.720%0D%0AThen%20counter%20would%20change%20to%20the%20next%20element%20in%20the%20collection%20which%20is%20three%20so%20counter%20would%20change%20its%20value%20to%0D%0A%0D%0A00:04:24.480%20--%3E%2000:04:31.420%0D%0Aand%20the%20body%20would%20be%20executed%20given%20that%20value%20of%20counter%20so%20calling%20the%20print%20statement%20would%20basically%20print%20three.%0D%0A%0D%0A00:04:31.870%20--%3E%2000:04:43.130%0D%0AAnd%20that\u0027s%20it%20basically%20we\u0027re%20done%20iterating%20over%20the%20entire%20collection%20so%20we\u0027re%20just%20actually%20the%20program%20ended%20so%0D%0A%0D%0A00:04:43.170%20--%3E%2000:04:44.320%0D%0Athat\u0027s%20basically%20it.%0D%0A%0D%0A00:04:44.530%20--%3E%2000:04:51.250%0D%0ASo%20you%20can%20see%20that%20that%20code%20basically%20printed%20one%20two%20and%20three%20each%20iteration%20we%20printed%20the%20value%20of%20counter%0D%0A%0D%0A00:04:51.730%20--%3E%2000:05:00.310%0D%0Aand%20we%20managed%20counter%20to%20change%20its%20value%20over%20that%20collection%20of%20elements.%0D%0A%0D%0A"}')