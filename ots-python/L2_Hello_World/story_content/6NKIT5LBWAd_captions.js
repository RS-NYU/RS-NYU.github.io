window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.10.13923.0%0D%0A%0D%0A00:00:00.830%20--%3E%2000:00:07.130%0D%0AOkay,%20so%20we%20know%20that%20our%20instructions%0D%0Aare%20basically%20a%20sequence%20of%20bytes,%20each%0D%0A%0D%0A00:00:07.131%20--%3E%2000:00:15.410%0D%0Aone%20representing%20an%20instruction%20in%20the%0D%0ACPU,%20then%20fetches%20and%20executes%20each%0D%0A%0D%0A00:00:15.411%20--%3E%2000:00:24.079%0D%0Ainstruction%20in%20order%20so%20the%20program%20is%0D%0Asequentially%20executed.%20The%20thing%20is,%20we%20as%0D%0A%0D%0A00:00:24.080%20--%3E%2000:00:30.560%0D%0Apeople%20are%20not%20going%20to%20write%20programs%0D%0Aas%20a%20sequence%20of%20zeros%20and%20ones.%20Even%0D%0A%0D%0A00:00:30.561%20--%3E%2000:00:34.609%0D%0Athough%20that\u0027s%20the%20way%20our%20computer%0D%0Abasically%20understands%20programs%20and%20knows%0D%0A%0D%0A00:00:34.610%20--%3E%2000:00:40.519%0D%0Ahow%20to%20execute%20programs,%20we%20are%20not%20into%0D%0Awriting%20code%20with%20zeros%20and%20ones.%20I%20would%0D%0A%0D%0A00:00:40.520%20--%3E%2000:00:46.789%0D%0AI%20want%20to%20say%20that%20the--%20programs%20that%0D%0Acomputer%20basically%20the%20computer%0D%0A%0D%0A00:00:46.790%20--%3E%2000:00:52.190%0D%0Abasically%20executes%20are%20written%20in%20a%0D%0Alanguage%20that%20we%20call%20machine%20language%0D%0A%0D%0A00:00:52.191%20--%3E%2000:00:59.179%0D%0Athe%20language%20we%20would%20write%20our%20programs%0D%0Aare%20high-level%20programming%20languages%0D%0A%0D%0A00:00:59.180%20--%3E%2000:01:03.109%0D%0Awe\u0027ll%20use%20Python%20but%20there%20are%20a%20few%0D%0Aother%20programming%20languages%20are%20very%0D%0A%0D%0A00:01:03.110%20--%3E%2000:01:12.920%0D%0Acommon%20as%20well,%20for%20example%20C,%20Java,%20C#,%20and%20a%20few%20other.%20So%20we%20would%0D%0A%0D%0A00:01:12.921%20--%3E%2000:01:19.430%0D%0Awrite%20our%20program%20in%20for%20example%20a%0D%0APython.%20But%20again,%20we%20can%20write%20in%20Python%0D%0A%0D%0A00:01:19.431%20--%3E%2000:01:24.110%0D%0Athat%20the%20CPU%20knows%20how%20to%20execute%0D%0Aprograms%20that%20are%20written%20in%20a%20machine%0D%0A%0D%0A00:01:24.111%20--%3E%2000:01:29.600%0D%0Alanguage.%20How%20will%20we%20convert%20the%20Python%20program%0D%0A%0D%0A00:01:29.601%20--%3E%2000:01:35.810%0D%0Ainto%20a%20machine%20language%20program?%20Luckily%0D%0Afor%20us%20since%20the%20syntax%20of%20the%0D%0A%0D%0A00:01:35.811%20--%3E%2000:01:41.060%0D%0Ahigh-level%20programming%20language,%20in%20this%0D%0Acase%20Python%20is%20as%20we%20said,%20well%20define%20or%0D%0A%0D%0A00:01:41.061%20--%3E%2000:01:47.800%0D%0Ahas%20a%20very%20strict%20set%20of%20rules%20we%20can%0D%0Ahave%20an%20automated%20process%20that%20basically%0D%0A%0D%0A00:01:47.801%20--%3E%2000:01:54.620%0D%0Atranslates%20the%20high-level%20programming--%20a%0D%0Ahigh-level%20program%20into%20an%20equivalent%0D%0A%0D%0A00:01:54.621%20--%3E%2000:02:00.500%0D%0Amachine%20language%20program.%20This%0D%0Atranslation%20basically%20takes%20as%20an%20input%0D%0A%0D%0A00:02:00.501%20--%3E%2000:02:06.140%0D%0Aour%20code%20in%20a%20high-level%20programming%0D%0Alanguage%20and%20creates%20a%20machine%20language%0D%0A%0D%0A00:02:06.141%20--%3E%2000:02:14.140%0D%0Aequivalent%20to%20it%20that%20can%20later%20be%0D%0Aexecuted%20by%20the%20CPU.%20So%0D%0A%0D%0A00:02:14.141%20--%3E%2000:02:20.590%0D%0AI%20want%20to%20say%20that%20there%20are%20two%20major%20ways%20or%0D%0Atwo%20major%20kinds%20of%20such%20translations.%0D%0A%0D%0A00:02:20.591%20--%3E%2000:02:26.800%0D%0AThere%20are%20translations%20that%20are%20done%20by%0D%0Aa%20compiler,%20a%20compilation,%20a%20process,%20and%0D%0A%0D%0A00:02:26.801%20--%3E%2000:02:31.630%0D%0Athere%20are%20a%20translations%20that%20are%20done%0D%0Aby%20an%20interpreter%20or%20an%20interpretation%0D%0A%0D%0A00:02:31.631%20--%3E%2000:02:37.090%0D%0Aprocess.%20The%20main%20difference%20between%0D%0Acompilation%20and%20interpretation%20goes%0D%0A%0D%0A00:02:37.091%20--%3E%2000:02:43.660%0D%0Asomething%20like%20that.%20If%20we%20are%20using%20a%0D%0Alanguage%20that%20is%20going%20to%20be%20compiled,%0D%0A%0D%0A00:02:43.661%20--%3E%2000:02:51.700%0D%0Athen%20the%20program%20would%20be%20taken%20as%20a%0D%0Awhole%20and%20the%20entire%20program%20would%20be%0D%0A%0D%0A00:02:51.701%20--%3E%2000:02:57.070%0D%0Atranslated%20to%20machine%20language%20and%20will%0D%0Ahave%20an%20equivalent%20machine%20language%20code%0D%0A%0D%0A00:02:57.071%20--%3E%2000:03:01.600%0D%0Afor%20the%20entire%20program%20that\u0027s%20compilation%0D%0Abasically.%20An%20interpretation%20is%20a%20bit%0D%0A%0D%0A00:03:01.601%20--%3E%2000:03:07.090%0D%0Adifferent%20when%20we%20have%20a%20program%20in%20a%0D%0Ahigh-level%20programming%20language,%20if%20we%0D%0A%0D%0A00:03:07.091%20--%3E%2000:03:12.730%0D%0Ause%20an%20interpreter%20in%20order%20to%20translate%0D%0Ait%20instead%20of%20taking%20the%20entire%20program%0D%0A%0D%0A00:03:12.731%20--%3E%2000:03:17.200%0D%0Aand%20translating%20it%20into%20an%20equivalent%0D%0Amachine%20language%20we%20take%20this%20program%0D%0A%0D%0A00:03:17.201%20--%3E%2000:03:22.690%0D%0Aone%20by%20one,%20expression%20by%20expression,%20we%0D%0Atake%20the%20first%20expression%20translate%20it%0D%0A%0D%0A00:03:22.691%20--%3E%2000:03:27.640%0D%0Ato%20machine%20language%20and%20execute%20that%0D%0Aexpression.%20Then%20we%20take%20the%20second%0D%0A%0D%0A00:03:27.641%20--%3E%2000:03:31.269%0D%0Aexpression%20in%20high-level%20programming%0D%0Alanguage%20translate%20it%20to%20machine%0D%0A%0D%0A00:03:31.270%20--%3E%2000:03:38.470%0D%0Alanguage%20and%20execute%20it%20on%20its%20own.%20So%20we%0D%0Aare%20not%20translating%20the%20entire%20program%0D%0A%0D%0A00:03:38.471%20--%3E%2000:03:42.970%0D%0Ainto%20an%20entire%20machine%20language%0D%0Aequivalent%20program,%20we\u0027re%20basically%0D%0A%0D%0A00:03:42.971%20--%3E%2000:03:48.640%0D%0Ataking%20the%20program%20expression%20by%0D%0Aexpression%20and%20translating%20it%20expression%0D%0A%0D%0A00:03:48.641%20--%3E%2000:03:54.970%0D%0Aby%20expression%20to%20machine%20language%20which%0D%0Awould%20be%20in%20turn%20executed.%20So%20there%20are%20a%0D%0A%0D%0A00:03:54.971%20--%3E%2000:03:59.790%0D%0Afew%20languages%20there%20are%20compilation%0D%0Abased%20there%20are%20few%20languages%20there%20are%0D%0A%0D%0A00:03:59.791%20--%3E%2000:04:07.200%0D%0Ainterpretation%20base.%20Python%20in%20some%20sense%0D%0Ais%20a%20weird%20combination%20between%20these%20two%0D%0A%0D%0A00:04:07.201%20--%3E%2000:04:14.530%0D%0Aideas%20but%20for%20our%20interests%20for%20a%0D%0Adiscourse%20we%20can%20think%20of%20Python%20as%20an%0D%0A%0D%0A00:04:14.531%20--%3E%2000:04:20.739%0D%0Ainterpreted%20language.%20Python%20has%20an%0D%0Ainterpreter%20that%20basically%20translates%0D%0A%0D%0A00:04:20.740%20--%3E%2000:04:27.590%0D%0Aeach%20expression%20separately%20to%20a%20machine%0D%0Alanguage%20code%20that%20would%20be%20executed.%0D%0A%0D%0A00:04:27.591%20--%3E%2000:04:36.590%0D%0ASo%20for%20our%20course%20here,%20we\u0027ll%20think%20of%20a%0D%0APython%20is%20an%20interpreted%20language%20for%0D%0A%0D%0A00:04:36.591%20--%3E%2000:04:45.250%0D%0Aexample%20C%20or%20C++%20are%20languages%20that%20use%20a%0D%0Acompiler%20which%20is%20a%20bit%20different%20but%0D%0A%0D%0A00:04:45.251%20--%3E%2000:04:50.923%0D%0Awe\u0027re%20going%20to%20use%20an%20interpreted%0D%0Alanguage%20for%20that%20case.%0D%0A%0D%0A"}')