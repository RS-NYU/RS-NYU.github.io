window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.269%20--%3E%2000:00:06.329%0D%0AOkay,%20let\u0027s%20go%20ahead%20and%20see%20what%0D%0Abuilt-in%20functions%20in%20Python%20work%20with%0D%0A%0D%0A00:00:06.330%20--%3E%2000:00:13.559%0D%0Aour%20lists.%20So%20let\u0027s%20assume%20we%20have%20a%20list%0D%0Acontaining%20these%20four%20elements:%2010,%202,%2030,%0D%0A%0D%0A00:00:13.560%20--%3E%2000:00:20.460%0D%0Aand%204.%20Obviously,%20or%20not%20obviously,%20but%20the%0D%0Alen%20function%20that%20works%20also%20with%0D%0A%0D%0A00:00:20.461%20--%3E%2000:00:25.439%0D%0Astrings,%20in%20this%20case%20would%20work%20with%20a%0D%0Alist%20as%20well.%20So%20if%20we%20ask%20the%20len%20of%20lst,%0D%0A%0D%0A00:00:25.440%20--%3E%2000:00:30.769%0D%0Awe\u0027re%20expecting%20to%20get%204,%20basically%20the%0D%0Anumber%20of%20elements%20stored%20in%20this%20list.%0D%0A%0D%0A00:00:30.770%20--%3E%2000:00:38.340%0D%0AWe%20also%20have%20a%20min%20function,%20so%20giving%20a%0D%0Alist%20to%20the%20min%20function%20would%20basically%0D%0A%0D%0A00:00:38.341%20--%3E%2000:00:43.800%0D%0Areturn%20the%20minimum%20element,%20the%20minimum%0D%0Avalue%20in%20this%20list.%20In%20our%20case%20of%2010,%202,%0D%0A%0D%0A00:00:43.801%20--%3E%2000:00:49.440%0D%0A30,%20and%204,%20the%20minimum%20value%20would%20be%202.%0D%0AAnd%20that\u0027s%20the%20value%20returned%20with%20the%0D%0A%0D%0A00:00:49.441%20--%3E%2000:00:54.540%0D%0Amin%20function.%20We%20also%20have%20a%20max%20function%0D%0Athat,%20given%20a%20list%20would%20return%20the%0D%0A%0D%0A00:00:54.541%20--%3E%2000:00:59.940%0D%0Amaximum%20element,%20element%20with%0D%0Aa%20maximum%20value%20in%20the%20list,%20in%20our%20case%0D%0A%0D%0A00:00:59.941%20--%3E%2000:01:04.710%0D%0Ait%20would%20be%2030.%20Another%20function%20that%0D%0Aworks%20with%20a%20list%20would%20be%20the%20sum%0D%0A%0D%0A00:01:04.711%20--%3E%2000:01:12.060%0D%0Afunction.%20So%20if%20you\u0027ll%20call%20sum%20with%20our%0D%0Alist%20as%20a%20parameter,%20this%20function%20would%0D%0A%0D%0A00:01:12.061%20--%3E%2000:01:16.890%0D%0Abasically%20add%20up%20all%20the%20elements%20in%20the%0D%0Alist%20and%20return%20the%20accumulated%20sum.%20In%0D%0A%0D%0A00:01:16.891%20--%3E%2000:01:23.299%0D%0Athis%20case%20it%20would%20be%2046.%20So%20that%20that\u0027s%0D%0Athe%20value%20we%20are%20getting%20back%20here.%20So%0D%0A%0D%0A00:01:23.300%20--%3E%2000:01:28.710%0D%0Athere%20are%20a%20few%20more%20functions,%20but%20these%0D%0Aare%20the%20most%20basic%20ones%20I%20want%20to%20go%0D%0A%0D%0A00:01:28.711%20--%3E%2000:01:33.299%0D%0Aover%20right%20now.%20So%20we%20have%20the%20len%0D%0Afunction%20saying%20how%20many%20elements%20we%0D%0A%0D%0A00:01:33.300%20--%3E%2000:01:37.380%0D%0Ahave%20in%20our%20list,%20the%20min%20and%20max%20that%0D%0Areturn%20the%20minimum%20element%20and%20the%0D%0A%0D%0A00:01:37.381%20--%3E%2000:01:43.740%0D%0Amaximum%20one,%20and%20sum%20that%20basically%20adds%0D%0Aall%20the%20values%20together%20and%20gives%20us%20the%0D%0A%0D%0A00:01:43.741%20--%3E%2000:01:50.999%0D%0Agrand%20total%20of%20the%20elements.%20I%0D%0Awant%20to%20take%20a%20closer%20look%20at%20these%0D%0A%0D%0A00:01:51.000%20--%3E%2000:01:58.649%0D%0Afunctions%20in%20terms%20of%20lists%20that%20are%20not%0D%0Anecessarily%20containing%20integers%20in%20them.%0D%0A%0D%0A00:01:58.650%20--%3E%2000:02:04.619%0D%0ASo%20min%20of%20a%20list%20with%20only%20integers%0D%0Abasically%20returns%20the%20minimum%20element%0D%0A%0D%0A00:02:04.620%20--%3E%2000:02:10.650%0D%0Aand%20it%20makes%20a%20lot%20of%20sense.%20What%20do%20you%0D%0Athink%20would%20happen%20if%20we%20search%20for%20the%0D%0A%0D%0A00:02:10.651%20--%3E%2000:02:14.100%0D%0Aminimum%20of%20a%20list%20of%20strings.%20In%20this%0D%0Acase%20I%20have%0D%0A%0D%0A00:02:14.101%20--%3E%2000:02:20.400%0D%0Athree%20strings%20in%20my%20list:%20Python,%20that\u0027s%0D%0Athe%20first%20string,%20is,%20fun.%0D%0A%0D%0A00:02:20.401%20--%3E%2000:02:27.690%0D%0AThese%20are%20the%20other%20two%20strings.%0D%0AWhat%20would%20min%20return%20in%20this%20case?%20So%0D%0A%0D%0A00:02:27.691%20--%3E%2000:02:32.960%0D%0Ayou%20might%20have%20guessed%20it,%20but%20it%0D%0Abasically%20returns%20the%20minimum%20string%0D%0A%0D%0A00:02:32.961%20--%3E%2000:02:37.950%0D%0Alexicographically,%20obviously,%20or%0D%0Aalphabetically.%20In%20this%20case,%20%22fun%22.%20That%0D%0A%0D%0A00:02:37.951%20--%3E%2000:02:44.540%0D%0Ais%20the%20the%20smallest%20string%20out%20of%20these%0D%0Athree%20elements.%0D%0A%0D%0A00:02:44.541%20--%3E%2000:02:55.080%0D%0AHow%20about%20minimum%20of%20lists%20that%20combines%0D%0Aor%20stores%20different%20types%20of%20elements%0D%0A%0D%0A00:02:55.081%20--%3E%2000:03:01.950%0D%0Awhere,%20in%20this%20case,%203,%20ABC,%20and%202?%20You%0D%0Acan%20try%20it%20out,%20but%20let%20me%20tell%20you%20that%0D%0A%0D%0A00:03:01.951%20--%3E%2000:03:08.280%0D%0Athat%20won\u0027t%20work,%20because%20obviously%20Python%0D%0Acannot%20compare%20an%20integer%20to%20a%20string%0D%0A%0D%0A00:03:08.281%20--%3E%2000:03:12.030%0D%0Aand%20figure%20out%20which%20one%20is%20less%20than%0D%0Athe%20other.%0D%0A%0D%0A00:03:12.031%20--%3E%2000:03:18.150%0D%0AIt%20also%20says%20%22Type%20error.%20Uncomparable%0D%0Atypes:%20a%20string%20and%20an%20int.%22%20Yeah,%20so%20if%20all%0D%0A%0D%0A00:03:18.151%20--%3E%2000:03:22.950%0D%0Athe%20data%20are%20integers%20or%20numerical,%0D%0Abasically%20you%20can%20find%20the%20minimum%20of%0D%0A%0D%0A00:03:22.951%20--%3E%2000:03:27.870%0D%0Athem.%20If%20all%20the%20data%20are%20strings,%20you%0D%0Acan%20compare%20them.%20So%20you%20can%20find%20the%0D%0A%0D%0A00:03:27.871%20--%3E%2000:03:34.530%0D%0Aminimum%20of%20them.%20You%20cannot%20mix%20a%0D%0Anumerical%20and%20textual%20types,%20because%20they%0D%0A%0D%0A00:03:34.531%20--%3E%2000:03:38.880%0D%0Aare%20not%20comparable%20to%20one%20another.%0D%0ATherefore%20a%20min%20is%20not%20defined%20in%20this%0D%0A%0D%0A00:03:38.881%20--%3E%2000:03:45.120%0D%0Acase.%20Similarly,%20but%20then%20a%20bit%20different,%0D%0Awould%20be%20the%20behavior%20of%20the%20sum%0D%0A%0D%0A00:03:45.121%20--%3E%2000:03:49.680%0D%0Afunction.%20So%20again%20if%20we%20have%20a%20sum%20of%20a%0D%0Alist%20containing%20only%20numerical%20values,%0D%0A%0D%0A00:03:49.681%20--%3E%2000:03:54.390%0D%0Aobviously%20to%20just%20add%20up%20these%20values.%0D%0AWhat%20would%20happen%20if%20we%20will%20try%20to%20sum%0D%0A%0D%0A00:03:54.391%20--%3E%2000:04:02.190%0D%0Aa%20list%20of%20strings?%20%22Python%22,%20%22is%22,%20%22fun%22.%20Would%0D%0Athat%20work?%20It%20could%20work.%20I%20can%20give%20a%0D%0A%0D%0A00:04:02.191%20--%3E%2000:04:10.560%0D%0Avery%20intuitive%20interpretation%20of%20adding%0D%0Astrings,%20basically%20we%20can%20plus%20strings%20to%0D%0A%0D%0A00:04:10.561%20--%3E%2000:04:14.700%0D%0Aone%20another.%20That%20would%20concatenate%20them,%0D%0Aright?%20So%20I%20would%20expect%20that%20sum%20of%0D%0A%0D%0A00:04:14.701%20--%3E%2000:04:21.380%0D%0A[Python,%20is,%20fun]%20would%20be%20just%20a%20very%20long%0D%0Atext%20%22Pythonisfun%22,%20a%20very%20long%20string.%0D%0A%0D%0A00:04:21.381%20--%3E%2000:04:26.900%0D%0AApparently%20doesn\u0027t%20work.%20Apparently%20that%0D%0Ais%20not%20supported%0D%0A%0D%0A00:04:26.901%20--%3E%2000:04:30.020%0D%0Ain%20Python.%20You\u0027ll%20get%20unexpected%20operants%0D%0Atypes,%0D%0A%0D%0A00:04:30.021%20--%3E%2000:04:35.780%0D%0A4%20plus%20int%20and%20str.%20And%20that\u0027s%20probably%0D%0Abecause%20when%20the%20sum%20function%20kind%20of%0D%0A%0D%0A00:04:35.781%20--%3E%2000:04:42.470%0D%0Aaccumulates%20the%20sum%20of%20the%20elements,%0D%0Ait%20starts%20with%20initializing%20a%20variable%0D%0A%0D%0A00:04:42.471%20--%3E%2000:04:46.940%0D%0Ato%200%20and%20just%20adding%20to%20that%20more%20and%0D%0Amore%20elements.%20So%20it%20started%20with%200,%20then%0D%0A%0D%0A00:04:46.941%20--%3E%2000:04:52.580%0D%0Aadded%2010,%20and%202,%20and%203,%20and%204,%20and%0D%0Afigured%20out%20the%2046.%20And%20that%20cannot%20be%0D%0A%0D%0A00:04:52.581%20--%3E%2000:04:58.910%0D%0Aapplied%20when%20you%20want%20to%20add%20strings.%20You%0D%0Akind%20of%20initialize%200%20and%20then%20add%20Python%0D%0A%0D%0A00:04:58.911%20--%3E%2000:05:03.500%0D%0Ato%200%20and%20and%20so%20on,%20because%20you%20cannot%0D%0Aadd%20a%20string%20and%20an%20int.%20That%20is%20what%20I%0D%0A%0D%0A00:05:03.501%20--%3E%2000:05:11.930%0D%0Aget%20from%20the%20error%20here,%20that%20unsupported%0D%0Aoperant%20type%204%20plus,%20where%20you%20can\u0027t%0D%0A%0D%0A00:05:11.931%20--%3E%2000:05:16.400%0D%0Aadd%20an%20int%20and%20a%20string.%20Maybe%20they%0D%0Acould%20have%20made%20a%20better%20implementation%0D%0A%0D%0A00:05:16.401%20--%3E%2000:05:23.180%0D%0Aof%20initializing,%20in%20this%20case%20an%20empty%0D%0Astring%20and%20start%20adding%20to%20that,%20but%0D%0A%0D%0A00:05:23.181%20--%3E%2000:05:28.789%0D%0Aapparently%20they%20didn\u0027t%20do%20that.%20So%20for%0D%0Ayour%20information,%20you%20can%20use%20sum%20on%20a%0D%0A%0D%0A00:05:28.790%20--%3E%2000:05:34.940%0D%0Alist%20with%20numerical%20types.%20You%20cannot%20do%0D%0Athe%20same%20for%20a%20list%20of%20strings%20where%0D%0A%0D%0A00:05:34.941%20--%3E%2000:05:41.888%0D%0Aminimum%20and%20maximum%20can%20be%20used%20to%0D%0Acompare%20basically%20strings.%0D%0A%0D%0A"}')