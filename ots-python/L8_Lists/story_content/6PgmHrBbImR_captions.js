window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.030%20--%3E%2000:00:05.730%0D%0AOkay,%20let\u0027s%20go%20over%20the%20list%20data%20type%20in%0D%0Amore%20detail.%0D%0A%0D%0A00:00:05.731%20--%3E%2000:00:13.259%0D%0ASo%20first%20let\u0027s%20see%20how%20we%20can%20create%0D%0Aliterals%20of%20type%20list%20in%20Python.%20So%20we\u0027ve%0D%0A%0D%0A00:00:13.260%20--%3E%2000:00:18.180%0D%0Aalready%20seen%20that%20we%20can,%20for%20example,%0D%0Acreate%20a%20simple%20list%20just%20by%20square%0D%0A%0D%0A00:00:18.181%20--%3E%2000:00:22.769%0D%0Abrackets%20and%20then%20writing%20the%20elements%0D%0Aseparated%20by%20commas,%20for%20example,%0D%0A%0D%0A00:00:22.770%20--%3E%2000:00:28.470%0D%0Alst%20equals%20the%20list%20of%201,%202,%203.%20Again,%0D%0Ahaving%20this%20expression%20evaluated%20would%0D%0A%0D%0A00:00:28.471%20--%3E%2000:00:33.660%0D%0Acreate%20a%20list%20object%20in%20our%20memory,%0D%0Abasically%20a%20sequence%20of%20references%20to%0D%0A%0D%0A00:00:33.661%20--%3E%2000:00:40.620%0D%0Athe%20data%201,%202,%20and%203,%20and%20lst%20would%0D%0Athen%20point%20to%20that%20object.%20But%20a%20list,%0D%0A%0D%0A00:00:40.621%20--%3E%2000:00:45.450%0D%0Aand%20that%20is%20a%20bit%20different%20in%20Python%0D%0Athan%20in%20other%20programming%20languages,%0D%0A%0D%0A00:00:45.451%20--%3E%2000:00:52.530%0D%0Adoesn\u0027t%20necessarily%20have%20to%20contain%0D%0Aelements%20that,%20or%20to%20store%20elements%20that%0D%0A%0D%0A00:00:52.531%20--%3E%2000:00:57.989%0D%0Aare%20all%20of%20the%20same%20type.%20For%20example,%20we%0D%0Acan%20have%20a%20list,%20for%20example,%20lst2,%20that%0D%0A%0D%0A00:00:57.990%20--%3E%2000:01:05.339%0D%0Awould%20contain%203,%204.5,%20ABC,%20and%20%22true%22.%20You%20can%0D%0Asee%20that%20each%20element%20here%20is%20of%20a%0D%0A%0D%0A00:01:05.340%20--%3E%2000:01:08.310%0D%0Adifferent%20type.%203%20is%20an%20integer.%204.5%20is%20a%0D%0Afloat.%0D%0A%0D%0A00:01:08.311%20--%3E%2000:01:12.930%0D%0AABC%20is%20a%20string.%20True%20is%20a%20boolean.%0D%0AThat\u0027s%20perfectly%20fine%20in%20Python.%0D%0A%0D%0A00:01:12.931%20--%3E%2000:01:19.170%0D%0AIn%20this%20case%20you\u0027ll%20have%20a%20list%20object%20or%20a%0D%0Asequential%20object%20that%20has%20four%20elements%0D%0A%0D%0A00:01:19.171%20--%3E%2000:01:26.430%0D%0Ain%20it,%20again%20referencing%20the%20specific%0D%0Adata%20that%20was%20defined%20in%20the%20literal%0D%0A%0D%0A00:01:26.431%20--%3E%2000:01:32.990%0D%0Athat%20we%20created,%20and%20lst2%20would%20point%0D%0Ato%20that%20data.%20Taking%20that%20even%20a%20step%0D%0A%0D%0A00:01:32.991%20--%3E%2000:01:40.770%0D%0Aforward,%20you%20can%20have%20lists%20also%20as%0D%0Aelements%20of%20lists.%20Or%20in%20other%20words,%20you%0D%0A%0D%0A00:01:40.771%20--%3E%2000:01:46.320%0D%0Acan%20have%20nested%20lists%20when%20you\u0027re%0D%0Adefining%20a%20list%20in%20Python.%20So%20in%20this%0D%0A%0D%0A00:01:46.321%20--%3E%2000:01:55.439%0D%0Acase,%20lst3%20would%20be%20the%20list%20of%201,%202,%20and%0D%0Aa%20list,%203,%204.%20So%20if%20you%20think%20closely%20here%0D%0A%0D%0A00:01:55.440%20--%3E%2000:01:59.670%0D%0Ayou%20will%20see%20that%20the%20number%20of%20elements%0D%0Ain%20lst3%20is%20basically%20three%20elements,%0D%0A%0D%0A00:01:59.671%20--%3E%2000:02:05.700%0D%0Aright?%20The%20integer%201,%20the%20integer%202,%20and%0D%0Athe%20list%20of%203,%204.%20The%20memory%20image%20of%20it%0D%0A%0D%0A00:02:05.701%20--%3E%2000:02:09.810%0D%0Awould%20look%20something%20like%20that.%20You%20would%0D%0Ahave%20a%203%20element%20sequential%20collection,%0D%0A%0D%0A00:02:09.811%20--%3E%2000:02:15.620%0D%0Afirst%20referencing%201,%20second%20referencing%0D%0A2,%20and%20the%20third%20referencing%20a%20nested%20list,%0D%0A%0D%0A00:02:15.621%20--%3E%2000:02:20.630%0D%0Abasically%20a%20list,%20another%20list%20object,%0D%0Awhich%20is%20a%20two%20element%20of%203%20and%204.%0D%0A%0D%0A00:02:20.631%20--%3E%2000:02:30.080%0D%0ASo%20yeah,%20that%20would%20probably%20be%20a%20good%0D%0Away%20to%20view%20it%20internally.%20So%20yeah,%20so%20for%0D%0A%0D%0A00:02:30.081%20--%3E%2000:02:35.360%0D%0APython%20literals,%20the%20basic%20idea%20is%0D%0Athat%20you%20can%20create%20lists%20objects%20just%0D%0A%0D%0A00:02:35.361%20--%3E%2000:02:41.720%0D%0Aby%20having%20a%20sequence%20of%20elements%0D%0Aseparated%20by%20commas%20and%20closed%20in%20square%0D%0A%0D%0A00:02:41.721%20--%3E%2000:02:47.000%0D%0Abrackets.%20You%20can%20also%20define%20-%20you%20see%0D%0Ahere%20the%20empty%20list,%20basically%20a%20list%0D%0A%0D%0A00:02:47.001%20--%3E%2000:02:51.500%0D%0Athat%20doesn\u0027t%20have%20any%20element%20in%20it.%0D%0AYou\u0027ll%20just%20have%20square%20brackets%20with%0D%0A%0D%0A00:02:51.501%20--%3E%2000:02:57.799%0D%0Anothing%20written%20in%20between%20them.%0D%0ARegarding%20operators%20you%20can%20apply%20on%0D%0A%0D%0A00:02:57.800%20--%3E%2000:03:02.420%0D%0Alists..%20So%20very%20similar%20to%20strings.%20By%20the%0D%0Away,%20you%20can%20use%20the%20plus%20and%20the%0D%0A%0D%0A00:03:02.421%20--%3E%2000:03:07.069%0D%0Amultiplication%20operator.%20In%20terms%20of%0D%0Alists,%20for%20example,%20if%20you%20add%20the%20list%0D%0A%0D%0A00:03:07.070%20--%3E%2000:03:12.620%0D%0A1,%202,%203,%20with%20the%20list%204,%205,%0D%0Ayour%20guess%20is%20probably%20right.%20It%20would%0D%0A%0D%0A00:03:12.621%20--%3E%2000:03:17.090%0D%0Aconcatenate%20and%20create%20a%20new%20list%0D%0Acontaining%20all%20these%20elements%20together.%0D%0A%0D%0A00:03:17.091%20--%3E%2000:03:21.620%0D%0ASo%20you\u0027ll%20get%201,%202,%203,%204,%205.%0D%0AFor%20the%20multiplication,%20if%20you\u0027ll%20have%0D%0A%0D%0A00:03:21.621%20--%3E%2000:03:27.049%0D%0Athe%20list%201,%202%20and%20multiply%20it%20by%0D%0Athree,%20basically%20you...%20I%20guess%20also%20you%0D%0A%0D%0A00:03:27.050%20--%3E%2000:03:34.519%0D%0Aguessed%20it%20right.%20You%20would%20get%20a%20list%0D%0Awhich%20is%20the%20three%20times%20the%20list%201,2,%20or%0D%0A%0D%0A00:03:34.520%20--%3E%2000:03:41.959%0D%0Aa%20duplicate%20of%20the%20list%201,%202%20three%20times.%20So%0D%0Ayou\u0027ll%20have%20the%20list%201,%202,%201,%202,%201,%202.%20Just%20as%0D%0A%0D%0A00:03:41.960%20--%3E%2000:03:47.870%0D%0Awith%20our%20strings,%20you%20can%20multiply%20a%20list%0D%0Aby%20an%20integer%20or%20an%20integer%20by%20a%20list,%0D%0A%0D%0A00:03:47.871%20--%3E%2000:03:54.019%0D%0Abut%20that%20would%20work%20only%20with%20an%20integer%0D%0Athat%20you\u0027re%20multiplying%20the%20list%20by.%20You%0D%0A%0D%0A00:03:54.020%20--%3E%2000:03:57.980%0D%0Acan\u0027t%20multiply%20a%20list%20by%20a%20float%20or%20by%0D%0Aanother%20list%20or%20by%20a%20string.%20That%20won\u0027t%0D%0A%0D%0A00:03:57.981%20--%3E%2000:04:05.000%0D%0Awork.%20You%20can%20just%20multiply%20it%20by%20an%0D%0Ainteger,%20basically%20referring%20to%20duplicate%0D%0A%0D%0A00:04:05.001%20--%3E%2000:04:12.650%0D%0Athat%20number%20of%20times%20the%20list.%20In%20terms%0D%0Aof%20boolean%20operators,%20basically%0D%0A%0D%0A00:04:12.651%20--%3E%2000:04:17.900%0D%0Aoperators%20that%20create%20a%20boolean%0D%0Aexpression%20of%20the%20form%20true%20and%20false.%20So%20we%0D%0A%0D%0A00:04:17.901%20--%3E%2000:04:24.070%0D%0Acan%20use%20the%20double%20equals%20to%20compare%0D%0Alists,%20whether%20they%20are%20basically%0D%0A%0D%0A00:04:24.071%20--%3E%2000:04:28.670%0D%0Arepresenting%20the%20same%20collection.%0D%0ASo%201,%202,%203%20double%20equals%201,%202,%203%0D%0A%0D%0A00:04:28.671%20--%3E%2000:04:34.940%0D%0Ais%20obviously%20true.%20But...%20and%20so%20you%0D%0Acan%20have%20the%20double%20equals,%20you%20can%20have%0D%0A%0D%0A00:04:34.941%20--%3E%2000:04:41.750%0D%0Athe%20not%20equals.%20as%20expected.%0D%0AThe%20question%20is,%20%22Can%20you%20compare%20lists%0D%0A%0D%0A00:04:41.751%20--%3E%2000:04:49.040%0D%0Ausing%20the%20less%20than%20operator?%22%20We%20could%20do%0D%0Athat%20with%20strings,%20right?%20We%20could%20compare%0D%0A%0D%0A00:04:49.041%20--%3E%2000:04:57.410%0D%0Aa%20string%20ABC%20to%20a%20string%20ABD,%20and%20we%0D%0Ahad%20some%20interpretation%20of%20what%20is%0D%0A%0D%0A00:04:57.411%20--%3E%2000:05:04.760%0D%0Aone%20string%20less%20than%20another,%20kind%20of%0D%0Adescribes.%20The%20question%20is,%20%22Is%20that%20also%20a%0D%0A%0D%0A00:05:04.761%20--%3E%2000:05:11.090%0D%0Avalid%20operator%20in%20terms%20of%20lists?%20Can%20we%0D%0Aask%20whether%20the%20list%201,%202,%203,%204,%0D%0A%0D%0A00:05:11.091%20--%3E%2000:05:20.390%0D%0Ais%20less%20than%20the%20list%201,%202,%205?%22%20So%0D%0Ayou%20can%20try%20it.%20I\u0027ll%20tell%20you%20what%0D%0A%0D%0A00:05:20.391%20--%3E%2000:05:27.440%0D%0Athe%20rule%20is.%20So%20yeah,%20first%20it%20is%20a%0D%0Avalid%20operator.%20The%20value%20is%20true,%20in%20this%0D%0A%0D%0A00:05:27.441%20--%3E%2000:05:32.030%0D%0Acase,%20of%201,%202,%203,%204%20less%20than%201,%202,%205.%20And%20the%20idea%20when%20we\u0027re%0D%0A%0D%0A00:05:32.031%20--%3E%2000:05:37.880%0D%0Acomparing%20lists%20is%20very%20similar%20to%20the%0D%0Aidea%20of%20comparing%20strings.%20It%20is%20also%0D%0A%0D%0A00:05:37.881%20--%3E%2000:05:43.580%0D%0Acompared%20lexicographically,%20basically%0D%0Acomparing%20the%20lists%20component%20by%0D%0A%0D%0A00:05:43.581%20--%3E%2000:05:48.410%0D%0Acomponent%20simultaneously,%20and%20finding%20the%0D%0Afirst%20place%20where%20they%20differ.%20So%20in%20this%0D%0A%0D%0A00:05:48.411%20--%3E%2000:05:53.600%0D%0Acase%20of%20comparing%201,%202,%203,%204%20to%201,%202,%205,%20%20the%20interpreter%20would%0D%0A%0D%0A00:05:53.601%20--%3E%2000:05:59.060%0D%0Acompare%201%20to%201,%20then%20go%20comparing%202%20to%202,%20%20and%20when%20reaching%20to%20compare%0D%0A%0D%0A00:05:59.061%20--%3E%2000:06:03.290%0D%0A3%20to%205,%20that\u0027s%20the%20first%20place%0D%0Awhere%20these%20two%20lists%20differ%20from%20one%0D%0A%0D%0A00:06:03.291%20--%3E%2000:06:07.820%0D%0Aanother.%20That\u0027s%20where%20the%20compiler%20would%0D%0Amake%20the%20choice%20that%20by%20looking%20at%20that%0D%0A%0D%0A00:06:07.821%20--%3E%2000:06:14.840%0D%0Alocal%20component%20that%203%20is%20less%20than%205,%0D%0Athe%20global%201,%202,%203,%204%20would%20be%20considered%0D%0A%0D%0A00:06:14.841%20--%3E%2000:06:20.480%0D%0Aless%20than%20the%20global%20list%201,%202,%205.%20That\u0027s%20why%0D%0Ait%20is%20true.%20Again%20a%20very%20similar%0D%0A%0D%0A00:06:20.481%20--%3E%2000:06:26.330%0D%0Acomparison%20scheme%20as%20we%20had%20in%0D%0Astrings%20where%20we%20compared%20the%20characters%0D%0A%0D%0A00:06:26.331%20--%3E%2000:06:30.410%0D%0Aone%20by%20one,%20searching%20for%20the%20first%0D%0Acharacter%20where%20they\u0027re%20different,%20and%20then%0D%0A%0D%0A00:06:30.411%20--%3E%2000:06:34.250%0D%0Acomparing%20the%20ASCII%20values.%20Same%20here.%0D%0AWe\u0027ll%20compare%20the%20list%20component%20by%0D%0A%0D%0A00:06:34.251%20--%3E%2000:06:37.760%0D%0Acomponent,%20searching%20for%20the%20first%0D%0Acomponent,%20first%20element%20where%20they%0D%0A%0D%0A00:06:37.761%20--%3E%2000:06:42.649%0D%0Adiffer%20from%20one%20another,%20and%20then%0D%0Amaking%20a%20local%20comparison%20by%20that%0D%0A%0D%0A00:06:42.650%20--%3E%2000:06:49.520%0D%0Acomponent,%20basically%20implying%20for%20the%0D%0Aglobal%20comparison%20result.%20So%20yeah,%20so%20we%0D%0A%0D%0A00:06:49.521%20--%3E%2000:06:54.680%0D%0Acan%20have%20less%20than,%20similarly%20we%20can%20have%0D%0Aa%20greater%20than,%20less%20or%20equal,%20greater%20or%0D%0A%0D%0A00:06:54.681%20--%3E%2000:07:03.020%0D%0Aequal%20as%20boolean%20operators%20that%20work%20on%0D%0Alists%20as%20well.%20The%20next%20boolean%0D%0A%0D%0A00:07:03.021%20--%3E%2000:07:10.219%0D%0Aoperator%20I%20want%20to%20talk%20in%20terms%20of%0D%0Alists%20is%20the%20in%20operator.%20The%20in%20operator%0D%0A%0D%0A00:07:10.220%20--%3E%2000:07:15.439%0D%0Ais%20a%20binary%20operator%20that%20works%0D%0Asomething%20like%20that.%20So%20if%20we\u0027ll%20have%20an%0D%0A%0D%0A00:07:15.440%20--%3E%2000:07:21.800%0D%0Aexpression%202%20in%201,%202,%203,%20basically%20we\u0027re%0D%0Achecking%20whether%202%20is%20a%20member%20in%20the%0D%0A%0D%0A00:07:21.801%20--%3E%2000:07:26.599%0D%0Acollection%201,%202,%203.%20In%20this%20case,%20as%20you%20can%0D%0Asee,%202%20is%20definitely%20a%20member.%20So%20we\u0027ll%0D%0A%0D%0A00:07:26.600%20--%3E%2000:07:34.099%0D%0Aget%20true%20as%20a%20value%20to%20this%20expression.%0D%0AIf%20we\u0027ll%20have,%20for%20example,%202%20in%20the%20list%0D%0A%0D%0A00:07:34.100%20--%3E%2000:07:40.490%0D%0A1,%202,%203,%20and%204.%20So%20this%20is,%20again,%20if%20you%20look%0D%0Aclosely%20at%20this%20list,%20it\u0027s%20a%203-element%0D%0A%0D%0A00:07:40.491%20--%3E%2000:07:47.240%0D%0Alist%20with%20an%20integer%201%20as%20the%20first%0D%0Aelement,%20a%20list%202,%203%20is%20the%20second%0D%0A%0D%0A00:07:47.241%20--%3E%2000:07:54.110%0D%0Aelement,%20and%20the%20integer%204%20as%20the%20third%0D%0Aelement.%20And%20when%20looking,%20we\u0027re%20asking%0D%0A%0D%0A00:07:54.111%20--%3E%2000:07:59.870%0D%0Awhether%202%20is%20a%20member%20of%20that%20list.%20The%0D%0Aresult%20would%20be%20false,%20and%20actually%20it%0D%0A%0D%0A00:07:59.871%20--%3E%2000:08:05.240%0D%0Amakes%20sense%20because%20none%20of%20the%20three%0D%0Aelements%20in%20this%20list%20are%202,%20right?%20The%0D%0A%0D%0A00:08:05.241%20--%3E%2000:08:09.860%0D%0Afirst%20one%20is%201,%20which%20is%20not%202,%20the%0D%0Asecond%20one%20is%20the%20list%202,%203,%20which%20is%20not%0D%0A%0D%0A00:08:09.861%20--%3E%2000:08:15.469%0D%0Athe%20integer%202,%20and%20the%20third%20one%20is%20the%0D%0Ainteger%204,%20which%20is%20not%202.%20So%202%20is%20not%20a%0D%0A%0D%0A00:08:15.470%20--%3E%2000:08:20.589%0D%0Amember%20of%20this%20list.%20That\u0027s%20why%20the%20in%0D%0Aexpression%20returned%20false%20in%20this%20case.%0D%0A%0D%0A00:08:20.590%20--%3E%2000:08:27.769%0D%0ASo%20yeah,%20so%20we%20have%20in%20as%20a%20boolean%0D%0Aoperator%20in%20terms%20of%20lists.%20Also%20we%20have%0D%0A%0D%0A00:08:27.770%20--%3E%2000:08:34.789%0D%0Aa%20not%20in%20operator%20that,%20as%20expected,%0D%0Abasically%20checks%20or%20determines%0D%0A%0D%0A00:08:34.790%20--%3E%2000:08:41.719%0D%0Awhether%20a%20value%20or%20an%20element%20is%20not%20a%0D%0Amember%20of%20the%20other%20argument,%20of%20the%0D%0A%0D%0A00:08:41.720%20--%3E%2000:08:49.970%0D%0Alist,%20in%20this%20case.%20Another%20important%0D%0Aproperty%20of%20a%20list...%20as%20we%20said,%20lists%20are%0D%0A%0D%0A00:08:49.971%20--%3E%2000:08:55.220%0D%0Amutable,%20iterable,%20sequential%20collections.%0D%0ASo%20the%20sequential%20properties%20of%20lists,%0D%0A%0D%0A00:08:55.221%20--%3E%2000:08:58.970%0D%0Aand%20again%20it\u0027s%20not%20going%20to%20come%20as%20a%0D%0Asurprise%20since%20we\u0027ve%20seen%20sequential%0D%0A%0D%0A00:08:58.971%20--%3E%2000:09:05.360%0D%0Acollections%20already,%20is%20the%20fact%20that%0D%0Alist%20supports%20indexing%20and%20slicing%20just%0D%0A%0D%0A00:09:05.361%20--%3E%2000:09:12.020%0D%0Alike%20strings%20do.%20It%20works%20very%20similarly.%0D%0ASo%20for%20example,%20if%20we%20have%20the%20list%2010,%2020,%0D%0A%0D%0A00:09:12.021%20--%3E%2000:09:18.280%0D%0A30,%2040,%2050,%20and%2060,%20that%20basically%20looks%0D%0Asomething%20like%20that,%20the%20indices%20that%20are%0D%0A%0D%0A00:09:18.281%20--%3E%2000:09:24.590%0D%0Aimplied%20for%20this%20list%20are%200,%201,%202,%203,%204,%20\u0026amp;%205.%0D%0AAnd%20then%20we%20can%20use%20indexing%20in%20order%20to%0D%0A%0D%0A00:09:24.591%20--%3E%2000:09:30.140%0D%0Aaccess%20specific%20elements.%20For%20example%20lst[2]%0D%0Awould%20access%20that%20element%20and%20the%0D%0A%0D%0A00:09:30.141%20--%3E%2000:09:36.880%0D%0Avalue%20would%20be,%20in%20this%20case,%2030.%20We%20also%0D%0Ahave%20negative%20indices,%20just%20as%20we%20had%20in%0D%0A%0D%0A00:09:36.881%20--%3E%2000:09:45.470%0D%0Astrings.%20So%20we%20have%20another%20sort%20of%20an%0D%0Aindexing%20scheme%20here%20of%20-1,%0D%0A%0D%0A00:09:45.471%20--%3E%2000:09:50.750%0D%0A-2,%20-3,%20-4,%20%20going%0D%0Afrom%20the%20end%20to%20start.%20So%20-2%0D%0A%0D%0A00:09:50.751%20--%3E%2000:09:55.400%0D%0Awould%20be%20the%20second%20to%20last%20element.%20In%20this%0D%0Acase%20it%20would%20be%2050.%20That\u0027s%20why%20we%0D%0A%0D%0A00:09:55.401%20--%3E%2000:10:01.670%0D%0Aget%20back%20a%2050%20over%20here.%20We%20have%20slicing.%0D%0AAgain,%20same%20syntax:%20square%20brackets,%20start%0D%0A%0D%0A00:10:01.671%20--%3E%2000:10:07.940%0D%0Aposition,%20colons,%20end%20position.%20So%20when%20we%0D%0Aask%20to%20slice%201%20and%204,%0D%0A%0D%0A00:10:07.941%20--%3E%2000:10:14.290%0D%0Awe\u0027ll%20get%20the%20slice%20from%201%20through%204.%0D%0AAgain%20Python%20uses%20the%20open%20concept%0D%0A%0D%0A00:10:14.291%20--%3E%2000:10:21.590%0D%0Aprinciple%20where%20the%20ending%20doesn\u0027t...%20is%0D%0Anot%20included%20in%20the%20range%20we\u0027re%20defining.%0D%0A%0D%0A00:10:21.591%20--%3E%2000:10:27.200%0D%0ASo%20basically%20it%20would%20be%20the%20indices%201,%202,%0D%0Aand%203%20only.%20So%20the%20slice%20we\u0027re%20gonna%20get%0D%0A%0D%0A00:10:27.201%20--%3E%2000:10:36.020%0D%0Aback%20is%20the%20string,%20sorry,%20the%20list%2020,%0D%0A30,%2040.%20So%20yeah,%20so%20we%20have%20indexing.%20We%0D%0A%0D%0A00:10:36.021%20--%3E%2000:10:42.530%0D%0Ahave%20slicing.%20That%20is%20a%20sequential%0D%0Abehavior%20or%20a%20sequential%20property%20of%20our%0D%0A%0D%0A00:10:42.531%20--%3E%2000:10:48.560%0D%0Alists.%20Next%20video%20we\u0027ll%20talk%20in%20more%0D%0Adetail%20about%20a%20thing%20that%20is%20a%20bit%0D%0A%0D%0A00:10:48.561%20--%3E%2000:10:53.355%0D%0Adifferent%20in%20lists%20than%20other%20collections%0D%0Awe\u0027ve%20already%20covered.%0D%0A%0D%0A"}')