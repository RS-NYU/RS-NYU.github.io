window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.190%20--%3E%2000:00:06.129%0D%0AOkay,%20so%20we\u0027ve%20seen%20that%20some%20list%0D%0Aoperations%20basically%20mutate%20the%20list%0D%0A%0D%0A00:00:06.130%20--%3E%2000:00:12.360%0D%0Aobject%20and%20change%20its%20value%20and%20its%0D%0Acontent,%20where%20some%20operations%20basically%0D%0A%0D%0A00:00:12.361%20--%3E%2000:00:17.890%0D%0Aconstruct%20and%20create%20a%20new%20list%20object.%0D%0AAnd%20we%20should%20be%20aware%20which%20operations%0D%0A%0D%0A00:00:17.891%20--%3E%2000:00:24.539%0D%0Amutate,%20which%20operations%20construct%20a%20new%0D%0Aobject.%20So%20let\u0027s%20make%20a%20table%20here%0D%0A%0D%0A00:00:24.540%20--%3E%2000:00:31.449%0D%0Abasically%20placing%20each%20operation%20based%0D%0Aon%20whether%20it\u0027s%20mutating%20the%20object%20or%0D%0A%0D%0A00:00:31.450%20--%3E%2000:00:37.480%0D%0Acreating%20a%20new%20object.%0D%0AThe%20most%20obvious%20operation%20that%20mutates%0D%0A%0D%0A00:00:37.481%20--%3E%2000:00:43.149%0D%0Aa%20list%20object%20would%20be%20an%20indexed%0D%0Aassignment.%20So%20for%20example,%20if%20you%20have%20a%0D%0A%0D%0A00:00:43.150%20--%3E%2000:00:48.100%0D%0Alist,%20you%20can%20use%20an%20index%20and%20then%0D%0Aassign%20to%20that%20position%20a%20new%20value.%0D%0A%0D%0A00:00:48.101%20--%3E%2000:00:53.949%0D%0AObviously%20the%20list%20object%20changes%20from%0D%0Aan%20old%20value%20in%20the%20ith%20position,%20for%0D%0A%0D%0A00:00:53.950%20--%3E%2000:00:57.670%0D%0Aexample%20to%20a%20new%20value%20in%20the%20ith%0D%0Aposition.%20So%20that%20definitely%20is%20a%0D%0A%0D%0A00:00:57.671%20--%3E%2000:01:03.010%0D%0Amutating%20operation.%0D%0AThe%20most%20obvious%20operation%20that%20creates%0D%0A%0D%0A00:01:03.011%20--%3E%2000:01:09.250%0D%0Aa%20new%20list,%20that%20construct%20a%20new%20list%0D%0Awould%20be%20to%20use%20the%20Python%20syntax%20of%0D%0A%0D%0A00:01:09.251%20--%3E%2000:01:14.080%0D%0Acreating%20new%20list%20objects.%20Basically%20the%0D%0Alist%20literals%20where%20you%20have%20brackets%0D%0A%0D%0A00:01:14.081%20--%3E%2000:01:19.600%0D%0Aand%20then%20you%20put%20some%20values%20separated%0D%0Aby%20commas.%20That%20definitely%20creates%20a%0D%0A%0D%0A00:01:19.601%20--%3E%2000:01:25.450%0D%0Anew%20list%20object%20with%20this%20data.%20Let\u0027s%0D%0Atake%20a%20look%20at%20some%20other%20operations%0D%0A%0D%0A00:01:25.451%20--%3E%2000:01:32.170%0D%0Athat%20mutate%20the%20list%20object.%20For%20example,%0D%0Athe%20append%20method.%20The%20append%20method%20works%0D%0A%0D%0A00:01:32.171%20--%3E%2000:01:39.220%0D%0Aon%20a%20list%20object,%20the%20calling%20object,%20and%0D%0Achanges%20the%20value%20of%20that%20object,%0D%0A%0D%0A00:01:39.221%20--%3E%2000:01:43.600%0D%0Abasically%20adding%20new%20data%20to%20the%20end%0D%0Aof%20the%20list.%20For%20example,%20if%20you%20have%20a%0D%0A%0D%0A00:01:43.680%20--%3E%2000:01:47.700%0D%0Alist%20LST%20that%20has%20[1,%202,%203],%20if%20you%20call%0D%0A%0D%0A00:01:47.710%20--%3E%2000:01:54.090%0D%0ALST%20dot%20append%20of%204,%20LST%20would%20be%20now%0D%0A[1,%202,%203,%204[,%20so%20you%20don\u0027t%20need%20to%0D%0A%0D%0A00:01:54.091%20--%3E%2000:02:01.570%0D%0Areassign%20the%20result%20of%20LST%20dot%20append%0D%0Aback%20to%20LST%20or%20to%20another%20list%20object.%0D%0A%0D%0A00:02:01.571%20--%3E%2000:02:07.570%0D%0AJust%20by%20calling%20LST%20dot%20append,%20that%0D%0Awould%20affect%20the%20LST%20object%20and%20add%204%20to%0D%0A%0D%0A00:02:07.571%20--%3E%2000:02:12.730%0D%0Ait,%20basically%20meaning%20it%20mutates%20the%20list.%0D%0AJust%20as%20we%20have%20append,%20we%20also%20have%20the%0D%0A%0D%0A00:02:12.731%20--%3E%2000:02:16.250%0D%0Ainsert%20method%0D%0Athat%20mutates%20the%20list%20and%20basically%20just%0D%0A%0D%0A00:02:16.251%20--%3E%2000:02:21.290%0D%0Aadds%20an%20element,%20not%20necessarily%20to%20the%0D%0Aend.%20You%20can%20provide%20an%20index%20where%20you%0D%0A%0D%0A00:02:21.291%20--%3E%2000:02:27.319%0D%0Awant%20your%20element%20to%20be%20added.%20The%20pop%0D%0Amethod%20that%20removes%20elements%20from%20a%20list.%0D%0A%0D%0A00:02:27.320%20--%3E%2000:02:35.420%0D%0AOnce%20again%20it%20mutates%20the%20list%20object%20by%0D%0Adeleting%20values%20from%20it.%20Also%20a%20reverse%0D%0A%0D%0A00:02:35.421%20--%3E%2000:02:39.980%0D%0Amethod,%20so%20if%20you%20have%20a%20list%0D%0ALST%20equals%20[1,%202,%203]%20and%20you%20call%0D%0A%0D%0A00:02:39.981%20--%3E%2000:02:45.950%0D%0ALST%20dot%20reverse,%20it%20would%20modify%20the%0D%0Aorder%20of%20the%20data%20in%20the%20LST%20object%20so%0D%0A%0D%0A00:02:45.951%20--%3E%2000:02:47.900%0D%0Ainstead%20of%20[1,%202,%203],%20it%20would%20be%0D%0A[3,%202,%201].%0D%0A%0D%0A00:02:47.901%20--%3E%2000:02:52.099%0D%0AThe%20point%20here%20obviously%20is%20not%20the%0D%0Areverse,%20but%20the%20fact%20that%20LST%20dot%0D%0A%0D%0A00:02:52.100%20--%3E%2000:02:57.470%0D%0Areverse%20affects%20the%20LST%20object,%20affects%0D%0Athe%20list,%20and%20mutates%20it%20so%20it%20would%20be%0D%0A%0D%0A00:02:57.471%20--%3E%2000:03:03.919%0D%0Ain%20a%20reverse%20order.%20And%20so%20does%20the%20sort%0D%0Amethod.%20It%20would%20reorder%20the%20elements%20of%20the%0D%0A%0D%0A00:03:03.920%20--%3E%2000:03:08.810%0D%0Aexisting%20list%20object%20to%20show%20in%20an%0D%0Aascending%20order,%20in%20a%20sorted%20order.%20So%20all%0D%0A%0D%0A00:03:08.811%20--%3E%2000:03:15.379%0D%0Aof%20these%20methods%20-%20append,%20insert,%20pop,%0D%0Areverse,%20sort%20-%20are%20methods%20that%20mutate%20the%0D%0A%0D%0A00:03:15.380%20--%3E%2000:03:21.169%0D%0Alist%20object.%20Let\u0027s%20take%20a%20look%20at%20some%0D%0Aoperations%20that%20create%20new%20lists.%20So%20we%0D%0A%0D%0A00:03:21.170%20--%3E%2000:03:27.319%0D%0Asaid%20that%20we%20can%20use%20the%20list%20literal%0D%0Asyntax%20in%20Python%20to%20create%20new%20objects,%0D%0A%0D%0A00:03:27.320%20--%3E%2000:03:33.530%0D%0Anew%20list%20objects.%20An%20alternative%20way%20of%0D%0Acreating%20a%20new%20list%20object%20is%20by%20using%0D%0A%0D%0A00:03:33.531%20--%3E%2000:03:39.379%0D%0Athe%20list%20constructor.%20For%20example,%20list%0D%0Aand%20then%20in%20parentheses%20you%20can%20put%20some%0D%0A%0D%0A00:03:39.380%20--%3E%2000:03:44.900%0D%0Avalues%20you%20want%20to%20create%20a%20list%20of,%20or%0D%0Ayou%20can%20have%20an%20iterable%20collection%20and%0D%0A%0D%0A00:03:44.901%20--%3E%2000:03:48.620%0D%0Ait%20would%20create%20a%20list%20of%20the%20elements%0D%0Ain%20that%20collection.%20For%20example,%20if%20you%0D%0A%0D%0A00:03:48.621%20--%3E%2000:03:55.280%0D%0Ahave%20the%20string%20ABC,%20if%20you%20call%20list%20of%0D%0AABC,%20that%20would%20create%20a%20list%20of%20[A,%20B,%20C].%0D%0A%0D%0A00:03:55.281%20--%3E%2000:04:01.430%0D%0ASo%20yeah.%20So%20a%20list%20constructor%0D%0Aconstructs%20a%20list,%20therefore%20it%20creates%20a%0D%0A%0D%0A00:04:01.431%20--%3E%2000:04:06.530%0D%0Anew%20list%20object.%20It%20doesn\u0027t%20change%20any%0D%0Aexisting%20list%20object%20with%20values.%20It%0D%0A%0D%0A00:04:06.531%20--%3E%2000:04:11.720%0D%0Acreates%20and%20constructs%20a%20new%20one.%20Some%0D%0Aother%20operations%20that%20create%20new%20lists%0D%0A%0D%0A00:04:11.721%20--%3E%2000:04:19.729%0D%0Aare%20the%20plus%20operator%20that%20concatenates%0D%0Atwo%20lists%20to%20a%20greater%20list%20of%20all%20the%0D%0A%0D%0A00:04:19.730%20--%3E%2000:04:24.229%0D%0Aelements%20together.%20So%20for%0D%0Aexample,%20if%20you%20have%20LST1%20which%20is%0D%0A%0D%0A00:04:24.230%20--%3E%2000:04:29.220%0D%0A[1,%202,%203],%20LST2%20which%20is%20[4,%205,%206],%20LST1%0D%0A%0D%0A00:04:29.221%20--%3E%2000:04:35.490%0D%0Aplus%20LST2%20would%20create%20a%20new%20list%0D%0Aobject%20of%20size%20six%20with%20[1,%202,%203,%204,%205,%206]%0D%0A%0D%0A00:04:35.491%20--%3E%2000:04:42.270%0D%0Aall%20together.%20The%20point%20here%0D%0Ais%20that%20LST1%20+%20LST2%20creates%20a%20new%0D%0A%0D%0A00:04:42.271%20--%3E%2000:04:45.990%0D%0Alist%20with%20one%20through%20six%20and%20it%20doesn\u0027t%0D%0Achange%0D%0A%0D%0A00:04:45.991%20--%3E%2000:04:52.440%0D%0ALST1%20or%20LS2%20to%20a%20different%20value.%0D%0AAfter%20calling%20LST1%20+%20LST2,%20LST1%20would%0D%0A%0D%0A00:04:52.441%20--%3E%2000:04:57.750%0D%0Aremain%20[1,%202,%203],%0D%0ALST2%20would%20remain%20[4,%205,%206],%20and%20if%20you%0D%0A%0D%0A00:04:57.751%20--%3E%2000:05:04.370%0D%0Awanna%20have%20or%20use%20that%20concatenated%0D%0Alist,%20you%20would%20need%20to%20store%20it%20in%20a%20new%0D%0A%0D%0A00:05:04.371%20--%3E%2000:05:11.370%0D%0Avariable,%20for%20example%20LST3%20equals%20LST1%0D%0A+%20LST2.%20The%20point%20once%20again%20is%20that%0D%0A%0D%0A00:05:11.371%20--%3E%2000:05:18.389%0D%0Athe%20plus%20operator%20or%20the%20expression%0D%0Acreated%20by%20the%20plus%20operator%20is%20a%20new%20list.%0D%0A%0D%0A00:05:18.390%20--%3E%2000:05:24.389%0D%0AIt%20doesn\u0027t%20change%20or%20modify%20or%20mutate%0D%0Aany%20one%20of%20the%20previous%20lists.%20Just%20as%20we%0D%0A%0D%0A00:05:24.390%20--%3E%2000:05:28.370%0D%0Ahave%20the%20plus%20operator,%20we%20also%20have%20the%0D%0Aduplication%20operator,%20the%20times%20operator,%0D%0A%0D%0A00:05:28.371%20--%3E%2000:05:35.220%0D%0Athat%20basically%20duplicates%20a%20list.%20So%20for%0D%0Aexample,%20if%20you%20have%20LST1%20[1,%202,%203],%20the%0D%0A%0D%0A00:05:35.221%20--%3E%2000:05:42.900%0D%0Alist%20[1,%202,%203],%20LST1%20times%203%20would%20create%20a%0D%0Anew%20list%20of%20length%209%20with%20the%20values%201,%202,%0D%0A%0D%0A00:05:42.901%20--%3E%2000:05:52.080%0D%0A3,%201,%202,%203,%201,%202,%203.%20Three%20times.%20Again,%20the%20point%20is%0D%0Athat%20the%20value%20that%20is%20evaluated%20by%0D%0A%0D%0A00:05:52.081%20--%3E%2000:05:57.180%0D%0Athe%20times%20operator,%20by%20the%20duplication%0D%0Aoperator,%20is%20basically%20a%20new%20list%20with%0D%0A%0D%0A00:05:57.181%20--%3E%2000:06:03.720%0D%0Athese%20values.%20Another%20operation%20that%0D%0Aconstructs%20a%20new%20list%20is%20the%0D%0A%0D%0A00:06:03.721%20--%3E%2000:06:09.479%0D%0Aslicing%20operation.%20So%20if%20you%20have%20a%20list%0D%0Aand%20you%20slice%20parts%20of%20it,%20it%20doesn\u0027t%0D%0A%0D%0A00:06:09.480%20--%3E%2000:06:14.580%0D%0Achange%20the%20list.%20The%20list%20would%20remain%0D%0Athe%20entire%20collection%20and%20the%20new%20slice%0D%0A%0D%0A00:06:14.581%20--%3E%2000:06:21.120%0D%0Awould%20be%20a%20new%20constructed%20list.%20Another%0D%0Amethod%20that%20constructs%20a%20new%20list,%20and%0D%0A%0D%0A00:06:21.121%20--%3E%2000:06:25.830%0D%0Athat%20won\u0027t%20come%20as%20a%20surprise,%20obviously%0D%0Athat%20would%20be%20the%20copy%20method.%20So%20if%0D%0A%0D%0A00:06:25.831%20--%3E%2000:06:32.099%0D%0Ayou%20have%20a%20list%20[1,%202,%203],%20LST%20dot%20copy%0D%0Awould%20create%20a%20new%20copy,%20would%20construct%0D%0A%0D%0A00:06:32.100%20--%3E%2000:06:39.210%0D%0Aa%20new%20list%20with%20a%20copy%20of%20the%20original%0D%0Alist.%20So%20it%20would,%20once%20again%20if%20LST%20is%0D%0A%0D%0A00:06:39.211%20--%3E%2000:06:43.530%0D%0A[1,%202,%203],%20it%20would%20be%20a%20new%20copy%20of%20the%20list%20[1,%202,%203].%0D%0A%0D%0A00:06:43.531%20--%3E%2000:06:49.810%0D%0ATwo%20last%20operations%20I%20want%20to%20mention%20in%0D%0Aterms%20of%20operations%20that%20mutate%20the%20list.%0D%0A%0D%0A00:06:49.811%20--%3E%2000:06:56.440%0D%0AThe%20first%20is%20the%20extend%20method.%20We\u0027ve%0D%0Amentioned%20it%20before.%0D%0A%0D%0A00:06:56.441%20--%3E%2000:07:02.409%0D%0ABasically%20append%20would%20take%20a%20single%0D%0Aelement%20and%20add%20it%20to%20the%20end,%20whereas%0D%0A%0D%0A00:07:02.410%20--%3E%2000:07:09.479%0D%0Athe%20extend%20method%20would%20take%20a%20list%20and%0D%0Aadd%20each%20one%20of%20its%20elements%0D%0A%0D%0A00:07:09.480%20--%3E%2000:07:16.810%0D%0Aindividually%20to%20the%20end.%20Obviously%20the%0D%0Aextend%20mutates%20the%20list%20for%20that.%20One%0D%0A%0D%0A00:07:16.811%20--%3E%2000:07:23.770%0D%0Alast%20operation%20I%20wanna%20mention%20in%20this%0D%0Acontext%20is%20the%20plus%20equals%20operator.%20And%0D%0A%0D%0A00:07:23.771%20--%3E%2000:07:29.409%0D%0Athat%20actually%20would,%20I%20guess,%20would%20come%0D%0Aas%20a%20surprise%20to%20some%20of%20you,%20at%20least%20it%0D%0A%0D%0A00:07:29.410%20--%3E%2000:07:37.300%0D%0Acame%20as%20a%20surprise%20when%20I%20first%20got%0D%0Aintroduced%20to%20that,%20because%20typically%0D%0A%0D%0A00:07:37.301%20--%3E%2000:07:42.909%0D%0Awhen%20we%20use%20the%20plus%20equals%20operator,%20for%0D%0Aexample%20I%20would%20say%20LST%20equals%20[1,%202,%203],%0D%0A%0D%0A00:07:42.910%20--%3E%2000:07:48.669%0D%0Aand%20then%20we%20want%20to%20add%20something%20to%20LST,%0D%0Awe%20do%20something%20like%20LST%20plus%20equals,%20for%0D%0A%0D%0A00:07:48.670%20--%3E%2000:07:55.779%0D%0Aexample%20[4,%205.].%20So%20we%20want%20to%20add%20the%20list%20[4,%205]%0D%0Ato%20the%20list%20[1,%202,%203]%20to%20have%20the%20list%0D%0A%0D%0A00:07:55.780%20--%3E%2000:08:03.870%0D%0A[1,%202,%203,%204,%205].%20I%20would%20have%20thought%20that%20when%20I%0D%0Awrite%20an%20expression%20LST%20plus%20equals%20[4,%205]%0D%0A%0D%0A00:08:03.871%20--%3E%2000:08:08.550%0D%0Ait%20would%20be%20equivalent%20to%20the%20expression%0D%0ALST%20equals%0D%0A%0D%0A00:08:08.551%20--%3E%2000:08:17.590%0D%0ALST%20+%20[4,%205].%20And%20the%20plus%20operator,%20we%20have%0D%0Ait%20in%20the%20constructing%20new%20list%20column,%0D%0A%0D%0A00:08:17.591%20--%3E%2000:08:23.139%0D%0Aso%20I%20would%20expect%20that%20the%20plus%20equals%0D%0Awould%20also%20construct%20a%20new%20list.%20But%0D%0A%0D%0A00:08:23.140%20--%3E%2000:08:29.409%0D%0Aapparently%20the%20plus%20equals%20in%20context%20of%0D%0Alists%20is%20not%20equivalent%20to%20LST%20equals%0D%0A%0D%0A00:08:29.410%20--%3E%2000:08:34.000%0D%0ALST%20plus%20something.%20It%20is%20basically%0D%0Aequivalent%20to%20the%20extend%20method.%0D%0A%0D%0A00:08:34.001%20--%3E%2000:08:42.399%0D%0ASo%20having%20LST%20plus%20equals%20[4,%205]%20would%0D%0Acreate%20or%20would%20mutate%20LST%20by%0D%0A%0D%0A00:08:42.400%20--%3E%2000:08:49.329%0D%0Aextending%20its%20contents%20with%0D%0Athe%20elements%20that%20we%20are%20adding%20to%20the%0D%0A%0D%0A00:08:49.330%20--%3E%2000:08:52.720%0D%0Alist.%0D%0ASo%20therefore%20the%20plus%20equals%20is%20in%0D%0A%0D%0A00:08:52.721%20--%3E%2000:08:56.829%0D%0APython%20basically%20equivalent%20to%20the%0D%0Aextend,%20to%20a%20call%20to%20the%20extend%20method,%20in%0D%0A%0D%0A"}')