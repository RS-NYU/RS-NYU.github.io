window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.030%20--%3E%2000:00:05.430%0D%0AOkay,%20so%20then%20again%20before%20going%20over%20the%0D%0Athird%20step%20of%20filtering%20the%20ones%20above%0D%0A%0D%0A00:00:05.431%20--%3E%2000:00:12.599%0D%0Athe%20average,%20let\u0027s%20implement%20the%20calc%0D%0Aaverage%20function.%20So%20it%20seems%20like%20in%0D%0A%0D%0A00:00:12.600%20--%3E%2000:00:16.379%0D%0Aorder%20to%20calculate%20the%20average,%20it%20shouldn\u0027t%0D%0Abe%20too%20much%20of%20a%20big%20deal.%20We%20just%20need%0D%0A%0D%0A00:00:16.380%20--%3E%2000:00:21.650%0D%0Ato%20add%20all%20the%20elements%20up%20so%20we%20can%0D%0Athen%20divide%20it%20by%20the%20number%20of%20elements%0D%0A%0D%0A00:00:21.651%20--%3E%2000:00:26.400%0D%0Aand%20that%20would%20be%20the%20average.%20In%0D%0Aorder%20to%20add%20the%20elements,%20we%20will%20have%0D%0A%0D%0A00:00:26.401%20--%3E%2000:00:34.320%0D%0Alike%20elem\u0027s%20sum%20variable%20that%20would%20be%0D%0Ainitialized%20to%20zero,%20and%20then%20we%20would%0D%0A%0D%0A00:00:34.321%20--%3E%2000:00:38.370%0D%0Aiterate%20over%20the%20elements%20and%20just%20add%0D%0Amore%20and%20more%20elements%20to%20this%20elem%20sum%0D%0A%0D%0A00:00:38.371%20--%3E%2000:00:41.149%0D%0Avariable.%20In%20order%20to%20iterate%20over%20the%0D%0Aelements,%0D%0A%0D%0A00:00:41.150%20--%3E%2000:00:46.680%0D%0Ait\u0027s%20natural%20just%20to%20use%20the%20for%20loop%0D%0Athat%20allows%20us%20to%20iterate%20over%20the%20list%0D%0A%0D%0A00:00:46.681%20--%3E%2000:00:56.219%0D%0Aelements.%20So%20for%20what%20in%20what%20collection.%0D%0ASo%20obviously%20the%20collection%20we\u0027ll%20iterate%0D%0A%0D%0A00:00:56.220%20--%3E%2000:01:01.440%0D%0Aover%20would%20be%20the%20list,%20right?%20And%20then%0D%0Aeach%20iteration%20we\u0027ll%20just%20have%20an%20element%0D%0A%0D%0A00:01:01.441%20--%3E%2000:01:08.130%0D%0Afrom%20the%20list%20for%20that%20iteration.%20I\u0027ll%0D%0Aname%20this%20variable%20elem,%20so%20for%20elem%20in%20LST.%0D%0A%0D%0A00:01:08.131%20--%3E%2000:01:11.880%0D%0AFirst%20iteration%20elem%20would%20be%20the%0D%0Afirst%20element,%20second%20iteration%20elem%20would%0D%0A%0D%0A00:01:11.881%20--%3E%2000:01:17.880%0D%0Abe%20the%20second%20element...%20Anyway%20what%20we\u0027ll%0D%0Ado%20for%20each%20element%20would%0D%0A%0D%0A00:01:17.881%20--%3E%2000:01:27.930%0D%0Abe%20elem\u0027s%20sum%20plus%20equals%20this%20elem,%20right?%0D%0AThis%20for%20loop%20would%20then%20just%20add%20all%0D%0A%0D%0A00:01:27.931%20--%3E%2000:01:35.579%0D%0Athe%20elements%20together.%20Then%20we\u0027ll%20have%20an%0D%0Aaverage%20variable%20that%20would%20be%20the%20elem\u0027s%0D%0A%0D%0A00:01:35.580%20--%3E%2000:01:44.070%0D%0Asum%20divided%20by%20the%20number%20of%20elements,%0D%0Awhich%20is%20basically%20the%20length%20of%20this%0D%0A%0D%0A00:01:44.071%20--%3E%2000:01:54.479%0D%0ALST,%20and%20obviously%20we\u0027ll%20just%20return%0D%0Aaverage%20as%20our%20return%20value.%20So%20yeah.%0D%0A%0D%0A00:01:54.480%20--%3E%2000:01:59.280%0D%0ASo%20when%20calling%20calc%20average,%20this%0D%0Afunction%20would%20iterate%20over%20the%20elements,%0D%0A%0D%0A00:01:59.281%20--%3E%2000:02:05.159%0D%0Aadding%20them%20up,%20divide%20them%20by%20the%0D%0Anumber%20of%20elements,%20and%20our%20average%0D%0A%0D%0A00:02:05.160%20--%3E%2000:02:10.950%0D%0Avariable%20in%20the%20main%20would%20have%20the%0D%0Avalue%20stored%20in%20it%20so%20we%20can%20announce%20it%0D%0A%0D%0A00:02:10.951%20--%3E%2000:02:15.560%0D%0Aright%20here%20in%20the%20print%20statement.%0D%0ASo%20we%20have%20the%20first%20step%20of%20reading%20the%0D%0A%0D%0A00:02:15.561%20--%3E%2000:02:21.320%0D%0Alist,%20second%20step%20of%20calculating%20the%0D%0Aaverage,%20and%20now%20basically%20we%20need%20to%0D%0A%0D%0A00:02:21.321%20--%3E%2000:02:27.350%0D%0Afind%20the%20ones%20that%20are%20above%20the%20average.%0D%0ASo%20we%20would%20need%20a%20function%20for%20that%0D%0A%0D%0A00:02:27.351%20--%3E%2000:02:40.540%0D%0Athird%20step.%20I\u0027m%20trying%20to%20think%20how%0D%0Ashould%20I%20name%20this%20function,%20so%20maybe%0D%0A%0D%0A00:02:40.541%20--%3E%2000:02:53.180%0D%0Afilter%20above%20average,%20right?%20So%20given%20a%0D%0Alist,%20you%20would%20filter%20the%20ones%20that%20are%0D%0A%0D%0A00:02:53.181%20--%3E%2000:02:58.940%0D%0Aabove%20the%20average.%20Something%20like%20that.%0D%0AI\u0027ll%20pass%20before%20implementing.%0D%0A%0D%0A00:02:58.941%20--%3E%2000:03:03.500%0D%0AI\u0027ve%20filtered%20the%20ones%20that%20are%0D%0Aabove%20the%20average,%20right?%20Not%20more%20than%0D%0A%0D%0A00:03:03.501%20--%3E%2000:03:09.550%0D%0Athat.%20And%20by%20the%20way,%20note%20that%20I%0D%0Adidn\u0027t%20pass%20the%20average%20as%20a%20parameter%0D%0A%0D%0A00:03:09.551%20--%3E%2000:03:16.070%0D%0Abecause,%20given%20a%20list,%20the%20function%0D%0Ashould%20filter%20the%20ones%20that%20are%20above%0D%0A%0D%0A00:03:16.071%20--%3E%2000:03:19.820%0D%0Athe%20average.%20It\u0027s%20kind%20of%20their%0D%0Aresponsibility%20to%20find%20the%20average%20and%0D%0A%0D%0A00:03:19.821%20--%3E%2000:03:24.530%0D%0Ato%20filter%20out%20the%20ones%20that%20are%20above%20the%20average.%20To%0D%0Amake%20it%20a%20more%20general,%20to%20make%20it%20more%0D%0A%0D%0A00:03:24.531%20--%3E%2000:03:31.100%0D%0Areusable,%20I\u0027m%20thinking%20maybe%20to%20define%20a%0D%0Amore%20general%20tasked%20function,%20so%20instead%0D%0A%0D%0A00:03:31.101%20--%3E%2000:03:38.690%0D%0Aof%20filtering%20above%20average%0D%0Alet\u0027s%20do%20filter%20above%20value,%20that%20in%0D%0A%0D%0A00:03:38.691%20--%3E%2000:03:45.140%0D%0Aaddition%20to%20the%20list,%20we%20would%20pass%20a%0D%0Avalue%20as%20an%20additional%20parameter.%20In%20this%0D%0A%0D%0A00:03:45.141%20--%3E%2000:03:50.870%0D%0Acase,%20if%20you%20pass%20the%20parameter,%20the%20value,%0D%0Aas%20the%20average,%20it%20would%20filter%20above%0D%0A%0D%0A00:03:50.871%20--%3E%2000:03:57.549%0D%0Athe%20average.%20But%20if%20you%20pass%20value%20as,%20for%0D%0Aexample%200,%20it%20would%20filter%20the%20positive%0D%0A%0D%0A00:03:57.550%20--%3E%2000:04:03.110%0D%0Avalues.%20So%20it%20seems%20like%20you%20are...%0D%0Awill%20be%20able%20to%20use%20this%20function%20more%0D%0A%0D%0A00:04:03.111%20--%3E%2000:04:09.650%0D%0Aoften%20or%20in%20more%20cases.%20That%20is%20an%0D%0Aadvantage%20of%20a%20function.%20The%20fact%20that%20it%0D%0A%0D%0A00:04:09.651%20--%3E%2000:04:15.170%0D%0Acould%20be%20used%20or%20reused%20in%20more%0D%0Ascenarios.%20And%20I%20prefer%20to%20make%20my%0D%0A%0D%0A00:04:15.171%20--%3E%2000:04:23.930%0D%0Afunctions,%20I%20would%20say,%20as%20general%20as%0D%0Apossible.%20So%20if%20this%20is%20the%20function%20we%0D%0A%0D%0A00:04:23.931%20--%3E%2000:04:30.310%0D%0Adecided%20to%20implement%20for%20that%20case,%0D%0AI%20would,%20after%20reading%20the%20grades%20and%0D%0A%0D%0A00:04:30.311%20--%3E%2000:04:38.680%0D%0Acalculating%20the%20average,%20I%20would%20say%20that%0D%0Alet\u0027s%20call%20filter%20above%20value%20sending%0D%0A%0D%0A00:04:38.681%20--%3E%2000:04:46.210%0D%0Athe%20grades%20list%20as%20the%20value%20I%20want%20to...%0D%0Aas%20the%20threshold%20I%20want%20to%20filter%20above.%0D%0A%0D%0A00:04:46.211%20--%3E%2000:04:56.410%0D%0ASo%20filter%20above%20value%20would%20do%20that%0D%0Aand%20it%20would%20return,%20hopefully,%20after%20we%0D%0A%0D%0A00:04:56.411%20--%3E%2000:05:05.110%0D%0Aimplement%20it,%20the%20filtered%20list.%20So%20I\u0027ll%20have%0D%0Aabove-average%20list%20equals%20whatever%0D%0A%0D%0A00:05:05.111%20--%3E%2000:05:13.770%0D%0Afilter%20above%20value.%20Let\u0027s%0D%0Ajust%20test%20it%20real%20quick.%20So%20I\u0027ll%20just%0D%0A%0D%0A00:05:13.771%20--%3E%2000:05:18.480%0D%0Aprint%20above%20average%20list%0D%0A%0D%0A"}')