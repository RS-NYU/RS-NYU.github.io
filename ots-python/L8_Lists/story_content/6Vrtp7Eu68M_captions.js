window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.710%20--%3E%2000:00:06.040%0D%0AOkay,%20so%20we%20have%20a%20few%20functions,%20built-in%0D%0Afunctions,%20that%20lists%20can%20be%20passed%20as%20parameters,%0D%0A%0D%0A00:00:06.041%20--%3E%2000:00:10.090%0D%0Aand%20then%20we%20can%20calculate%20the%20len,%20the%20min,%0D%0Athe%20max,%20and%20sum,%20and%20so%20on.%0D%0A%0D%0A00:00:10.091%20--%3E%2000:00:15.500%0D%0AWe%20want%20to%20talk%20about%20methods%20that%20work%20with%0D%0Astring%20objects.%0D%0A%0D%0A00:00:15.501%20--%3E%2000:00:20.590%0D%0ABasically,%20in%20order%20to%20call%20a%20method,%20as%20you%0D%0Aprobably%20remember,%20you%20need%20the%20list%20of%20the%0D%0A%0D%0A00:00:20.591%20--%3E%2000:00:24.880%0D%0Acalling%20objects,%20that\u0027s%20kind%20of%20the%20way%20you%0D%0Apass%20the%20list%20as%20a%20parameter,%20so%20you%20have%0D%0A%0D%0A00:00:24.881%20--%3E%2000:00:28.279%0D%0Athe%20list%20of%20the%20calling%20object%20dot%20and%20then%0D%0Athe%20name%20of%20the%20method.%0D%0A%0D%0A00:00:28.280%20--%3E%2000:00:35.519%0D%0ASo%20the%20first%20method%20I%20want%20go%20over%20is%20called%0D%0Athe%20append%20method,%20that,%20given%20an%20object,%0D%0A%0D%0A00:00:35.520%20--%3E%2000:00:39.620%0D%0Awould%20basically%20append%20it%20to%20the%20list,%20basically%0D%0Aadd%20it%20to%20the%20end%20of%20the%20list.%0D%0A%0D%0A00:00:39.621%20--%3E%2000:00:41.570%0D%0ALet%20me%20show%20you%20how%20it%20works.%0D%0A%0D%0A00:00:41.571%20--%3E%2000:00:46.809%0D%0ASo%20for%20example,%20if%20we%20have%20the%20list%20[1,%202,%0D%0A3],%20that%20would%20look%20internally%20something%20like%0D%0A%0D%0A00:00:46.810%20--%3E%2000:00:51.949%0D%0Athat%20-%20an%20LST%20variable%20pointing%20to%20a%20sequence%0D%0Aof%201,%202,%20and%203.%0D%0A%0D%0A00:00:51.950%20--%3E%2000:00:55.870%0D%0AI%20can%20use%20the%20append%20method,%20something%20like%0D%0Athat.%0D%0A%0D%0A00:00:55.871%20--%3E%2000:01:02.190%0D%0ALST%20dot%20append%20of%20four,%20intending%20to%20add%20four%0D%0Ato%20the%20end%20of%20the%20list.%0D%0A%0D%0A00:01:02.191%20--%3E%2000:01:03.530%0D%0ANote%20the%20syntax.%0D%0A%0D%0A00:01:03.531%20--%3E%2000:01:06.950%0D%0ALST%20dot%20append%20of%20four.%0D%0A%0D%0A00:01:06.951%20--%3E%2000:01:10.420%0D%0AAppend%20is%20a%20method,%20so%20you%20have%20LST%20as%20a%20calling%0D%0Aobject.%0D%0A%0D%0A00:01:10.421%20--%3E%2000:01:16.330%0D%0ABasically%20you%20are%20saying,%20%22I%20want%20to%20add%20four%0D%0Ato%20the%20end%20of%20LST.%22%0D%0A%0D%0A00:01:16.331%20--%3E%2000:01:24.950%0D%0AI%20would%20view%20it%20as%20if%20it\u0027s%20kind%20of%20adding%0D%0Aan%20additional%20element%20to%20the%20list%20and%20putting%0D%0A%0D%0A00:01:24.951%20--%3E%2000:01:27.530%0D%0Afour%20in%20that%20additional%20element.%0D%0A%0D%0A00:01:27.531%20--%3E%2000:01:31.890%0D%0AIt\u0027s%20not%20100%25%20accurate,%20but%20it\u0027s%20close%20enough.%0D%0A%0D%0A00:01:31.891%20--%3E%2000:01:42.150%0D%0ASo%20I%20want%20you%20to%20visualize%20it%20representation-wise%0D%0Aor%20memory-wise%20this%20way%20at%20this%20point.%0D%0A%0D%0A00:01:42.151%20--%3E%2000:01:52.000%0D%0ASo%20once%20we%20do%20that,%20our%20list%20would%20be%20mutated%0D%0Aand%20basically%20containing%20the%20values%201,%202,%0D%0A%0D%0A00:01:52.001%20--%3E%2000:01:53.000%0D%0A3,%204.%0D%0A%0D%0A00:01:53.001%20--%3E%2000:01:58.110%0D%0AThat\u0027s%20another%20place%20where%20we%20see%20the%20mutability%0D%0Aof%20the%20list.%0D%0A%0D%0A00:01:58.111%20--%3E%2000:02:01.460%0D%0AWe%20didn\u0027t%20say%20LST%20=%20LST.append%20of%204.%0D%0A%0D%0A00:02:01.461%20--%3E%2000:02:06.140%0D%0AWe%20didn\u0027t%20need%20to%20reassign%20the%20appended%20list%0D%0Aback%20to%20LST.%0D%0A%0D%0A00:02:06.141%20--%3E%2000:02:13.920%0D%0AJust%20by%20calling%20append%20on%20LST,%20that%20mutated%0D%0Athe%20LST%20object%20and%20it\u0027s%20no%20longer%20[1,%202,%203],%0D%0A%0D%0A00:02:13.921%20--%3E%2000:02:15.910%0D%0Ait%20is%20[1,%202,%203,%204].%0D%0A%0D%0A00:02:15.911%20--%3E%2000:02:20.530%0D%0ASo%20the%20append%20here%20basically%20affected%20the%0D%0Aobject.%0D%0A%0D%0A00:02:20.531%20--%3E%2000:02:24.100%0D%0ANote%20that%20we%20didn\u0027t%20have%20to%20assign%20anything%0D%0Aback%20to%20LST.%0D%0A%0D%0A00:02:24.101%20--%3E%2000:02:26.890%0D%0AJust%20calling%20append%20mutated%20that%20list.%0D%0A%0D%0A00:02:26.891%20--%3E%2000:02:30.950%0D%0AAgain,%20we\u0027ll%20talk%20about%20mutability%20in%20more%0D%0Adetail%20later%20on.%0D%0A%0D%0A00:02:30.951%20--%3E%2000:02:33.000%0D%0ASo%20we%20have%20the%20append%20method.%0D%0A%0D%0A00:02:33.001%20--%3E%2000:02:38.590%0D%0AThere%20are%20two%20other%20methods%20that%20are%20used%0D%0Ato%20add%20values%20to%20the%20list.%0D%0A%0D%0A00:02:38.591%20--%3E%2000:02:41.510%0D%0AThere%20is%20the%20insert%20method%20and%20the%20extend%0D%0Amethod.%0D%0A%0D%0A00:02:41.511%20--%3E%2000:02:48.060%0D%0AI\u0027ll%20go%20over%20them%20kind%20of%20quickly,%20but%20you%0D%0Acan%20try%20them%20on%20your%20own%20on%20your%20interpreter%0D%0A%0D%0A00:02:48.061%20--%3E%2000:02:52.210%0D%0Ato%20see%20exactly%20how%20they%20work.%0D%0A%0D%0A00:02:52.211%20--%3E%2000:02:58.540%0D%0ASo%20for%20example,%20if%20you%20have%20the%20list%20[2,%204,%0D%0A2],%20that%20basically%20looks%20something%20like%20that%0D%0A%0D%0A00:02:58.541%20--%3E%2000:03:02.900%0D%0Ain%20our%20memory,%20you%20can%20append%201%20to%20LST,%20right?%0D%0A%0D%0A00:03:02.901%20--%3E%2000:03:04.450%0D%0ALST%20dot%20append%20of%201.%0D%0A%0D%0A00:03:04.451%20--%3E%2000:03:07.530%0D%0AThat%20would%20add%201%20to%20the%20end%20of%20LST,%20right?%0D%0A%0D%0A00:03:07.531%20--%3E%2000:03:18.680%0D%0ASo%20LST%20would%20be%20extended%20by%201%20or%20get%20an%20additional%0D%0Aelement%20that%20basically%20points%20to%201.%0D%0A%0D%0A00:03:18.681%20--%3E%2000:03:24.750%0D%0AWe%20can%20add%20elements%20not%20necessarily%20to%20the%0D%0Aend%20by%20using%20append,%20we%20can%20add%20elements%20anywhere%0D%0A%0D%0A00:03:24.751%20--%3E%2000:03:27.150%0D%0Awe%20want%20inside%20our%20sequence.%0D%0A%0D%0A00:03:27.151%20--%3E%2000:03:31.640%0D%0AFor%20example,%20by%20the%20way,%20to%20do%20that%20we%20use%0D%0Athe%20insert%20method.%0D%0A%0D%0A00:03:31.641%20--%3E%2000:03:35.750%0D%0ASo%20for%20example,%20we%20can%20do%20something%20like%20LST%0D%0Adot%20insert%20[2,%209].%0D%0A%0D%0A00:03:35.751%20--%3E%2000:03:41.740%0D%0ASo%202%20is%20basically%20the%20location,%20the%20index%0D%0Awhere%20we%20add%20the%20element,%20and%209,%20that\u0027s%20the%0D%0A%0D%0A00:03:41.741%20--%3E%2000:03:43.120%0D%0Avalue%20we%20want%20to%20add.%0D%0A%0D%0A00:03:43.121%20--%3E%2000:03:50.010%0D%0ASo%20by%20calling%20LST%20dot%20insert%20[2,%209],%20I\u0027m%20kind%0D%0Aof%20saying,%20%22Let\u0027s%20add%209%20at%20index%202.%22%0D%0A%0D%0A00:03:50.011%20--%3E%2000:03:58.930%0D%0ASo%20if%20we%20have%20the%20indices%200,%201,%202,%203,%20for%0D%0A[2,%204,%202,%201],%20when%20we%20want%20to%20add%209%20at%20index%0D%0A%0D%0A00:03:58.931%20--%3E%2000:04:04.060%0D%0A2,%20it%20would%20behave%20something%20like%20that.%0D%0A%0D%0A00:04:04.061%20--%3E%2000:04:08.860%0D%0AEventually%20you%20would%20have%20a%20five-element%20list,%0D%0Aso%20you%20kind%20of%20extend%20your%20list%20with%20another%0D%0A%0D%0A00:04:08.861%20--%3E%2000:04:10.240%0D%0Aelement.%0D%0A%0D%0A00:04:10.241%20--%3E%2000:04:15.390%0D%0AAnd%20then%20if%20you%20want%20to%20put%20your%209%20at%20index%0D%0A2,%20you%20would%20need%20to%20shift%20the%20elements%20that%0D%0A%0D%0A00:04:15.391%20--%3E%2000:04:25.729%0D%0Aare%20currently%20at%20indices%202%20and%203,%20you%20would%0D%0Ashift%20them%20one%20position%20to%20the%20right.%0D%0A%0D%0A00:04:25.730%20--%3E%2000:04:33.740%0D%0ASo%20the%201%20would%20be%20shifted,%20the%202%20would%20be%0D%0Ashifted,%20and%20then%20you%20have%20your%20index%202%20available%0D%0A%0D%0A00:04:33.741%20--%3E%2000:04:36.199%0D%0Ato%20get%20the%209%20in%20that.%0D%0A%0D%0A00:04:36.200%20--%3E%2000:04:43.800%0D%0ASo%20insert%20[2,%209]%20would%20take%20the%20elements%20from%0D%0Aindices%202%20and%20up%20one%20position%20to%20the%20right,%0D%0A%0D%0A00:04:43.801%20--%3E%2000:04:48.620%0D%0Afreeing%20the%20place%20for%20the%209%20to%20be%20inserted%0D%0Aat%20index%202.%0D%0A%0D%0A00:04:48.621%20--%3E%2000:04:50.889%0D%0ASo%20that\u0027s%20the%20insert%20function.%0D%0A%0D%0A00:04:50.890%20--%3E%2000:04:54.699%0D%0AAgain,%20so%20append%20basically%20adds%20to%20the%20end.%0D%0A%0D%0A00:04:54.700%20--%3E%2000:05:00.669%0D%0AInsert,%20given%20an%20index,%20you%20can%20add%20anywhere%0D%0Ayou%20want%20in%20our%20list.%0D%0A%0D%0A00:05:00.670%20--%3E%2000:05:06.790%0D%0ABy%20the%20way,%20you%20can%20add%20integers,%20you%20can%0D%0Aadd%20lists,%20whatever.%0D%0A%0D%0A00:05:06.791%20--%3E%2000:05:08.900%0D%0ALet\u0027s%20take%20a%20look%20at%20this%20call%20here.%0D%0A%0D%0A00:05:08.901%20--%3E%2000:05:11.900%0D%0ALST%20dot%20append%20of%20five,%20six.%0D%0A%0D%0A00:05:11.901%20--%3E%2000:05:14.490%0D%0AThat%20would%20add%20a%20single%20element,%20right?%0D%0A%0D%0A00:05:14.491%20--%3E%2000:05:19.439%0D%0AContaining%20a%20reference%20to%20a%20list,%20in%20this%0D%0Acase,%20[5,%206].%0D%0A%0D%0A00:05:19.440%20--%3E%2000:05:27.159%0D%0AA%20new%20method,%20or%20another%20method%20I%20want%20to%0D%0Aintroduce%20here%20in%20the%20context%20of%20extending%0D%0A%0D%0A00:05:27.160%20--%3E%2000:05:32.680%0D%0Aor%20in%20the%20context%20of%20adding%20values%20to%20a%20list,%0D%0Ais%20called%20the%20extend%20method.%0D%0A%0D%0A00:05:32.681%20--%3E%2000:05:38.520%0D%0ASo%20LST%20dot%20extend%20of%20five,%20six,%20looks%20very%0D%0Asimilar%20to%20the%20append%20of%20five,%20six.%0D%0A%0D%0A00:05:38.521%20--%3E%2000:05:46.560%0D%0ABut%20not%20as%20append%20that%20adds%20a%20single%20element%0D%0Aof%20the%20list,%20extend%20would%20extend%20the%20list%0D%0A%0D%0A00:05:46.561%20--%3E%2000:05:48.789%0D%0Awith%20a%20collection%20of%20elements.%0D%0A%0D%0A00:05:48.790%20--%3E%2000:05:53.610%0D%0ASo%20in%20this%20case,%20let%20me%20start%20over...%0D%0A%0D%0A00:05:53.611%20--%3E%2000:06:01.430%0D%0AWhen%20you%20call%20the%20extend%20method,%20you%20must%0D%0Agive%20a%20collection%20as%20a%20parameter%20to%20that%20method.%0D%0A%0D%0A00:06:01.431%20--%3E%2000:06:06.810%0D%0AIn%20this%20case,%20you%20call%20LST%20dot%20extend%20of%20the%0D%0Alist%20[5,%206].%0D%0A%0D%0A00:06:06.811%20--%3E%2000:06:11.930%0D%0AThat%20would%20basically%20add%20each%20one%20of%20the%20elements%0D%0Aof%20the%20collection%20into%20our%20list.%0D%0A%0D%0A00:06:11.931%20--%3E%2000:06:16.370%0D%0AIn%20this%20case%20it%20will%20add%20the%20element%205%20and%0D%0Athe%20element%206%20to%20our%20list.%0D%0A%0D%0A00:06:16.371%20--%3E%2000:06:19.289%0D%0ASo%20we%20basically%20extended%20our%20list%20by%20two%20element.%0D%0A%0D%0A00:06:19.290%20--%3E%2000:06:24.410%0D%0ANot%20like%20append%20that%20extended%20it,%20that%20always%0D%0Aextends%20it%20with%20a%20single%20element,%20extend%20would%0D%0A%0D%0A00:06:24.411%20--%3E%2000:06:29.949%0D%0Aextend%20the%20list%20with%20as%20many%20elements%20as%20we%0D%0Ahave%20in%20the%20collection%20passed%20as%20an%20argument.%0D%0A%0D%0A00:06:29.950%20--%3E%2000:06:37.560%0D%0AMake%20sure%20that%20when%20you%20call%20extend,%20you%20do%0D%0Anot%20call%20it%20with%20a%20parameter%20that%20is%20not%20a%0D%0A%0D%0A00:06:37.561%20--%3E%2000:06:38.560%0D%0Acollection.%0D%0A%0D%0A00:06:38.561%20--%3E%2000:06:42.569%0D%0AFor%20example,%20you%20cannot%20do%20LST%20dot%20extend%0D%0Aof%201.%0D%0A%0D%0A00:06:42.570%20--%3E%2000:06:44.039%0D%0AThat\u0027s%20invalid.%0D%0A%0D%0A00:06:44.040%20--%3E%2000:06:48.789%0D%0AAlways%20when%20you%20call%20extend,%20it%20should%20be%0D%0Aas%20a...%20with%20a%20collection%20that%20you%20want%20to%0D%0A%0D%0A00:06:48.790%20--%3E%2000:06:50.460%0D%0Aextend%20the%20list%20with.%0D%0A%0D%0A00:06:50.461%20--%3E%2000:06:54.840%0D%0ASo%20we%20have%20append,%20to%20add%20a%20single%20element%0D%0Ato%20the%20end.%0D%0A%0D%0A00:06:54.841%20--%3E%2000:06:58.990%0D%0AWe%20have%20insert,%20to%20add%20a%20single%20element%20at%0D%0Aa%20specific%20position.%0D%0A%0D%0A00:06:58.991%20--%3E%2000:07:06.919%0D%0AWe%20have%20extend,%20that%20would%20basically%20add%20multiple%0D%0Aelements%20of%20a%20collection%20to%20our%20calling%20object.%0D%0A%0D%0A00:07:06.920%20--%3E%2000:07:14.469%0D%0AAnd%20these%20are%20the%20main%20ways%20we%20can%20add%20elements%0D%0Ato%20our%20list.%0D%0A%0D%0A00:07:14.470%20--%3E%2000:07:18.590%0D%0AThere%20are%20a%20few%20more%20methods%20I%20want%20to%20go%0D%0Aover%20in%20terms%20of%20lists.%0D%0A%0D%0A00:07:18.591%20--%3E%2000:07:24.529%0D%0ASo%20if%20these%20three%20kind%20of%20allow%20us%20to%20add%0D%0Aelements%20to%20our%20list,%20it\u0027s%20natural%20to%20be...%0D%0A%0D%0A00:07:24.530%20--%3E%2000:07:27.580%0D%0Ato%20wonder%20if%20we%20can%20also%20remove%20elements%20from%0D%0Aour%20list.%0D%0A%0D%0A00:07:27.581%20--%3E%2000:07:29.610%0D%0AAnd%20obviously,%20we%20can.%0D%0A%0D%0A00:07:29.611%20--%3E%2000:07:33.650%0D%0AThe%20pop%20method%20does%20that%20for%20us.%0D%0A%0D%0A00:07:33.651%20--%3E%2000:07:39.780%0D%0ASo%20there%20are%20two%20versions%20of%20pop%20-%20a%20default%0D%0Aversion%20with%20no%20parameters%20and%20a%20version%20that%0D%0A%0D%0A00:07:39.781%20--%3E%2000:07:42.360%0D%0Agets%20an%20index%20as%20a%20parameter.%0D%0A%0D%0A00:07:42.361%20--%3E%2000:07:48.939%0D%0AI\u0027m%20guessing%20you%20are%20already...%20have%20your%0D%0Aown%20idea%20what%20these%20two%20kind%20of%20do,%20but%20let\u0027s%0D%0A%0D%0A00:07:48.940%20--%3E%2000:07:50.139%0D%0Ago%20over%20it.%0D%0A%0D%0A00:07:50.140%20--%3E%2000:07:54.629%0D%0ASo%20for%20example,%20if%20we%20have%20a%20list%20of...%20like%0D%0Athat.%0D%0A%0D%0A00:07:54.630%20--%3E%2000:07:59.569%0D%0ABasically%20the%20list%20we%20had%20before,%20[2,%204,%209,%0D%0A2,%201,%20[5,%206],%205,%206].%0D%0A%0D%0A00:07:59.570%20--%3E%2000:08:02.990%0D%0ABasically%20it%20looks%20something%20like%20that.%0D%0A%0D%0A00:08:02.991%20--%3E%2000:08:06.620%0D%0AWe%20can%20LST%20dot%20pop%20with%20no%20parameters.%0D%0A%0D%0A00:08:06.621%20--%3E%2000:08:12.669%0D%0ASo%20the%20default%20behavior%20of%20pop%20without%20a%20parameter%0D%0Awould%20basically%20remove%20the%20last%20element%20from%0D%0A%0D%0A00:08:12.670%20--%3E%2000:08:13.669%0D%0Athe%20list.%0D%0A%0D%0A00:08:13.670%20--%3E%2000:08:17.289%0D%0AIt%20would%20remove,%20in%20this%20case,%206,%20that\u0027s%20our%0D%0Alast%20element.%0D%0A%0D%0A00:08:17.290%20--%3E%2000:08:18.800%0D%0AWe\u0027d%20remove%20it%20from%20the%20list.%0D%0A%0D%0A00:08:18.801%20--%3E%2000:08:25.439%0D%0AWe\u0027d%20reduce%20and%20just%20delete%20this%20element%20from%0D%0Athe%20list.%0D%0A%0D%0A00:08:25.440%20--%3E%2000:08:27.319%0D%0AIt%20also%20returns%20that%20value.%0D%0A%0D%0A00:08:27.320%20--%3E%2000:08:32.550%0D%0ASo%20the%20value%20of%20this%20expression%20would%20be%20the%0D%0A6%20that%20was%20removed.%0D%0A%0D%0A00:08:32.551%20--%3E%2000:08:37.990%0D%0AIf%20you\u0027ll%20use%20the%20extended%20version%20where%20you%0D%0Agive%20a%20parameter,%20in%20this%20case%20pop(2),%20then%0D%0A%0D%0A00:08:37.991%20--%3E%2000:08:45.520%0D%0Ait%20basically%20means%20that,%20based%20on%20the%20indices,%0D%0Ain%20this%20case%200,%201,%202,%203,%204,%205,%206,%20you%20want%0D%0A%0D%0A00:08:45.521%20--%3E%2000:08:48.720%0D%0Ato%20remove%20the%209,%20which%20is%20placed%20at%20index%0D%0A2.%0D%0A%0D%0A00:08:48.721%20--%3E%2000:08:56.500%0D%0ASo%20when%20you\u0027re%20removing%209,%20you%20would%20need%0D%0Ato%20push%20all%20the%20elements,%20or%20squeeze%20all%20the%0D%0A%0D%0A00:08:56.501%20--%3E%2000:09:01.330%0D%0Aelements%20back%20to%20cover%20this%20element%20that%20you\u0027re%0D%0Aremoving.%0D%0A%0D%0A00:09:01.331%20--%3E%2000:09:03.380%0D%0ASo%20visually%20it%20looks%20something%20like%20that.%0D%0A%0D%0A00:09:03.381%20--%3E%2000:09:08.990%0D%0ASo%20you%20have%20your%209%20taken%20out,%20then%20you%20move%0D%0Athe%202%20back,%20the%201%20back,%20the%20list%20[5,%206]%20back,%0D%0A%0D%0A00:09:08.991%20--%3E%2000:09:16.870%0D%0Athe%205%20back,%20and%20basically%20you%20just%20erase%20the%0D%0Alast%20element,%20the%20last%20position%20that%20is%20not%0D%0A%0D%0A00:09:16.871%20--%3E%2000:09:18.830%0D%0Aneeded%20any%20more.%0D%0A%0D%0A00:09:18.831%20--%3E%2000:09:23.760%0D%0AOnce%20again,%20the%20pop%20method%20would%20return%20the%0D%0Aelement%20that%20was%20popped.%0D%0A%0D%0A00:09:23.761%20--%3E%2000:09:27.980%0D%0AIn%20this%20case%209%20would%20be%20returned.%0D%0A%0D%0A00:09:27.981%20--%3E%2000:09:31.550%0D%0APop%20with%20no%20parameters%20just%20removes%20the%20last%0D%0Aelement.%0D%0A%0D%0A00:09:31.551%20--%3E%2000:09:40.780%0D%0APop%20with%20an%20index%20first%20shifts%20the%20element%0D%0Ato%20kind%20of%20cover%20the%20item%20that%20we%20removed,%0D%0A%0D%0A00:09:40.781%20--%3E%2000:09:45.020%0D%0Aand%20then%20it%20just%20returns%20that%20element.%0D%0A%0D%0A00:09:45.021%20--%3E%2000:09:50.650%0D%0AThere%20are%20a%20few%20more%20methods%20-%20an%20index%20method%0D%0Aand%20a%20count%20method.%0D%0A%0D%0A00:09:50.651%20--%3E%2000:09:55.000%0D%0AIndex%20basically%20is%20used%20to%20search%20in%20a%20list.%0D%0A%0D%0A00:09:55.001%20--%3E%2000:10:02.970%0D%0ASo%20for%20example,%20LST%20index%202%20would%20search%20for%0D%0A2%20in%20our%20list,%20as%20an%20element%20of%20our%20list.%0D%0A%0D%0A00:10:02.971%20--%3E%2000:10:05.620%0D%0AActually%20we%20have%20a%20few%20occurrences%20of%202%20here.%0D%0A%0D%0A00:10:05.621%20--%3E%2000:10:11.210%0D%0AWe%20have%202%20at%20index%200%20and%20we%20have%202%20at%20index%0D%0A2.%0D%0A%0D%0A00:10:11.211%20--%3E%2000:10:15.860%0D%0AIndex%20would%20return%20the%20appearance%20of%20the%20first%0D%0Aoccurrence%20of%20the%20element%20we%20are%20searching%0D%0A%0D%0A00:10:15.861%20--%3E%2000:10:16.860%0D%0Afor.%0D%0A%0D%0A00:10:16.861%20--%3E%2000:10:21.330%0D%0AIn%20this%20case,%20LST%20index%202%20would%20return%200.%0D%0A%0D%0A00:10:21.331%20--%3E%2000:10:27.730%0D%0ACount%20basically,%20as%20the%20name%20suggests,%20tells%0D%0Aus%20how%20many%20times%20an%20element%20shows%20in%20a%20list.%0D%0A%0D%0A00:10:27.731%20--%3E%2000:10:33.270%0D%0ASo%20for%20example,%20if%20we%20do%20LST%20dot%20count%20of%0D%0A5,%20it%20would%20tell%20us%20how%20many%20times%20we%20see%0D%0A%0D%0A00:10:33.271%20--%3E%2000:10:34.940%0D%0A5%20in%20our%20list.%0D%0A%0D%0A00:10:34.941%20--%3E%2000:10:36.210%0D%0AAs%20elements!%0D%0A%0D%0A00:10:36.211%20--%3E%2000:10:37.720%0D%0ANot%20as%20nested%20elements.%0D%0A%0D%0A00:10:37.721%20--%3E%2000:10:42.840%0D%0AIn%20this%20case%20we%20would%20get%201%20back,%20because%0D%0Awe%20have%20only%20one%20occurrence%20of%205,%20the%20last%0D%0A%0D%0A00:10:42.841%20--%3E%2000:10:44.000%0D%0Aelement%20here.%0D%0A%0D%0A00:10:44.001%20--%3E%2000:10:45.850%0D%0ASo%20that\u0027s%20what%20we%20get%205.%0D%0A%0D%0A00:10:45.851%20--%3E%2000:10:52.030%0D%0ASo%20the%20nested%205%20is%20not%20counted,%20because%20the%0D%0Aelements%20of%20the%20list%20are%202,%204,%202,%201,%20some%0D%0A%0D%0A00:10:52.031%20--%3E%2000:10:53.650%0D%0Alist,%20and%205.%0D%0A%0D%0A00:10:53.651%20--%3E%2000:10:56.570%0D%0ASo%205%20basically%20shows%20a%20single%20time.%0D%0A%0D%0A00:10:56.571%20--%3E%2000:11:07.730%0D%0ATwo%20last%20methods%20I%20want%20to%20say%20here%20is%20the%0D%0Areverse%20method,%20that,%20as%20the%20name%20suggests,%0D%0A%0D%0A00:11:07.731%20--%3E%2000:11:10.140%0D%0Abasically%20reverses%20the%20order%20of%20the%20items.%0D%0A%0D%0A00:11:10.141%20--%3E%2000:11:18.410%0D%0AIt%20is%20a%20mutable%20method,%20so%20it%20just%20reorders%0D%0Athe%20elements%20of%20the%20list%20so%20they%20would%20show%0D%0A%0D%0A00:11:18.411%20--%3E%2000:11:19.850%0D%0Ain%20a%20reverse%20order.%0D%0A%0D%0A00:11:19.851%20--%3E%2000:11:26.050%0D%0AAnd%20the%20sort%20method,%20that%20again,%20if%20we\u0027re%0D%0Acalling%20LST%20dot%20sort,%20no%20arguments%20here,%20it%0D%0A%0D%0A00:11:26.051%20--%3E%2000:11:29.300%0D%0Awould%20just%20reorder%20the%20elements%20so%20they%20would%0D%0Ago%20up%20in%20ascending%20order.%0D%0A%0D%0A"}')