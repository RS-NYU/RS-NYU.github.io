window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.969%20--%3E%2000:00:06.809%0D%0AOk,%20so%20we%20said%20that%20lists%20are%20basically%20mutable,%0D%0Aiterable,%20sequential%20collections.%0D%0A%0D%0A00:00:06.810%20--%3E%2000:00:10.300%0D%0AWe\u0027ve%20seen%20that%20it%20is%20sequential%20-%20the%20fact%0D%0Athat%20it%20has%20indices.%0D%0A%0D%0A00:00:10.301%20--%3E%2000:00:12.550%0D%0AWe%20can%20index%20elements.%0D%0A%0D%0A00:00:12.551%20--%3E%2000:00:16.900%0D%0AWe%20can%20slice%20a%20sublist%20from%20a%20list.%0D%0A%0D%0A00:00:16.901%20--%3E%2000:00:19.520%0D%0AWe%20also%20said%20that%20lists%20are%20iterable.%0D%0A%0D%0A00:00:19.521%20--%3E%2000:00:25.099%0D%0AWe%20can%20probably%20guess%20correctly%20what%20it%20means,%0D%0Abut%20let\u0027s%20say%20it%20explicitly.%0D%0A%0D%0A00:00:25.100%20--%3E%2000:00:32.000%0D%0ASo%20a%20for%20loop%20basically%20works%20something%20like%0D%0Athat:%20%22for%20element%20in%20some%20iterable%20collection%22.%0D%0A%0D%0A00:00:32.001%20--%3E%2000:00:38.360%0D%0AAnd%20if%20we\u0027re%20considering%20lists%20as%20iterable%0D%0Acollections,%20let\u0027s%20see%20what%20does%20that%20mean.%0D%0A%0D%0A00:00:38.361%20--%3E%2000:00:45.070%0D%0ASo%20we%20already%20have%20seen%20a%20couple%20of%20types%0D%0Athat%20can%20be%20considered...%20a%20couple%20of%20objects%0D%0A%0D%0A00:00:45.071%20--%3E%2000:00:47.210%0D%0Athat%20can%20be%20considered%20as%20iterable%20collections.%0D%0A%0D%0A00:00:47.211%20--%3E%2000:00:52.790%0D%0AWe\u0027ve%20talked%20about%20the%20range%20function,%20that%0D%0Acreates%20a%20sequence%20of%20integers%20that%20are%20iterable.%0D%0A%0D%0A00:00:52.791%20--%3E%2000:00:58.870%0D%0AWe\u0027ve%20seen%20that%20strings%20are%20basically%20an%20iterable%0D%0Acollection%20of%20characters%20-%20the%20characters%0D%0A%0D%0A00:00:58.871%20--%3E%2000:01:00.400%0D%0Ain%20the%20string.%0D%0A%0D%0A00:01:00.401%20--%3E%2000:01:05.110%0D%0ALists,%20as%20we%20said,%20are%20also%20considered%20to%0D%0Abe%20iterable%20collections.%0D%0A%0D%0A00:01:05.111%20--%3E%2000:01:07.960%0D%0AAgain,%20we\u0027re%20gonna%20iterate%20over%20the%20elements%0D%0Aof%20the%20list.%0D%0A%0D%0A00:01:07.961%20--%3E%2000:01:09.640%0D%0ALet%20me%20show%20you%20how%20it%20works.%0D%0A%0D%0A00:01:09.641%20--%3E%2000:01:20.130%0D%0ASo,%20for%20example,%20if%20we%20have%20a%20list%20of%20these%0D%0Aelements%20here:%203,%204.5,%20ABC,%20the%20list%20[1,%202],%0D%0A%0D%0A00:01:20.131%20--%3E%2000:01:21.380%0D%0Aand%20True.%0D%0A%0D%0A00:01:21.381%20--%3E%2000:01:23.700%0D%0AWe%20can%20iterate%20over%20it%20using%20a%20for%20loop.%0D%0A%0D%0A00:01:23.701%20--%3E%2000:01:28.370%0D%0AIt%20would%20look%20something%20like,%20%22for%20element%0D%0Ain%20collection%22.%0D%0A%0D%0A00:01:28.371%20--%3E%2000:01:32.420%0D%0AWe\u0027ll%20have%20lst%20as%20our%20iterable%20collection.%0D%0A%0D%0A00:01:32.421%20--%3E%2000:01:37.180%0D%0AWhen%20we%20do%20that,%20basically%20we\u0027re%20gonna%20iterate%0D%0Aover%20the%20elements%20one%20by%20one.%0D%0A%0D%0A00:01:37.181%20--%3E%2000:01:40.350%0D%0ASo%20first%20iteration%20we\u0027ll%20iterate%20for%201.%0D%0A%0D%0A00:01:40.351%20--%3E%2000:01:43.850%0D%0ASecond%20iteration%20would%20be%20considering%204.5.%0D%0A%0D%0A00:01:43.851%20--%3E%2000:01:46.060%0D%0AThird%20iteration%20for%20the%20string%20ABC.%0D%0A%0D%0A00:01:46.061%20--%3E%2000:01:48.960%0D%0AAnd%20then%20an%20iteration%20for%20the%20list%20[1,%202].%0D%0A%0D%0A00:01:48.961%20--%3E%2000:01:51.520%0D%0AAnd%20finally,%20an%20iteration%20for%20%22True%22.%0D%0A%0D%0A00:01:51.521%20--%3E%2000:01:58.090%0D%0AWe%20should%20give%20a%20variable%20to%20store%20each%20element%0D%0Afor%20each%20iteration.%0D%0A%0D%0A00:01:58.091%20--%3E%2000:02:00.350%0D%0ALet\u0027s%20just%20name%20it%20item.%0D%0A%0D%0A00:02:00.351%20--%3E%2000:02:06.490%0D%0AAnd%20then,%20in%20the%20body,%20we%20should%20figure%20out%0D%0Awhat%20we%20want%20to%20do%20with%20item.%0D%0A%0D%0A00:02:06.491%20--%3E%2000:02:12.200%0D%0AI%20just%20printed%20%22Item%22%20and%20the%20type%20of%20item,%0D%0Aseparating%20them%20with%20a%20tab.%0D%0A%0D%0A00:02:12.201%20--%3E%2000:02:15.930%0D%0AIn%20this%20case,%20let\u0027s%20see%20what%20happens%20when%0D%0Awe%20execute%20it.%0D%0A%0D%0A00:02:15.931%20--%3E%2000:02:20.420%0D%0ASo%20first%20item,%20for%20our%20first%20iteration,%20item%0D%0Agets%20the%20value%20of%203.%0D%0A%0D%0A00:02:20.421%20--%3E%2000:02:26.230%0D%0AWhen%20we%20print%20item%20and%20type%20of%20item,%20we\u0027ll%0D%0Aprint%203%20and%20the%20type%20of%203%20is%20basically%20integer.%0D%0A%0D%0A00:02:26.231%20--%3E%2000:02:29.900%0D%0ASecond%20iteration,%20item%20would%20be%204.5.%0D%0A%0D%0A00:02:29.901%20--%3E%2000:02:34.670%0D%0AWe\u0027ll%20print%204.5%20and%20the%20type%20of%204.5,%20which%0D%0Ais%20basically%20float.%0D%0A%0D%0A00:02:34.671%20--%3E%2000:02:40.970%0D%0AAnd%20then,%20next%20iteration,%20item%20would%20be%20ABC,%0D%0Athat%20would%20print%20ABC%20and%20the%20string%20ABC.%0D%0A%0D%0A00:02:40.971%20--%3E%2000:02:47.880%0D%0AAnd%20the%20list%20[1,%202],%20it%20would%20print%20the%20list%0D%0A[1,%202]%20and%20the%20type%20of%20the%20list,%20basically%0D%0A%0D%0A00:02:47.881%20--%3E%2000:02:48.880%0D%0Aa%20list.%0D%0A%0D%0A00:02:48.881%20--%3E%2000:02:51.160%0D%0AAnd%20then%20True%20and%20bool.%0D%0A%0D%0A00:02:51.161%20--%3E%2000:02:56.360%0D%0AAs%20you%20can%20see,%20%22for%20item%20in%20list%22,%20basically%0D%0Awe%20are%20iterating%20over%20the%20elements%20of%20the%0D%0A%0D%0A00:02:56.361%20--%3E%2000:03:02.569%0D%0Alist,%20and%20each%20iteration%20we\u0027re%20printing%20that%0D%0Aitem%20and,%20in%20this%20case,%20we%20also%20printed%20the%0D%0A%0D%0A00:03:02.570%20--%3E%2000:03:04.550%0D%0Atype%20of%20that%20item.%0D%0A%0D%0A00:03:04.551%20--%3E%2000:03:09.730%0D%0ASo%20we%20are...%20the%20main%20idea%20here%20is%20that%20we%0D%0Acan%20iterate%20over%20a%20list.%0D%0A%0D%0A00:03:09.731%20--%3E%2000:03:11.280%0D%0AA%20list%20is%20an%20iterable%20collection.%0D%0A%0D%0A00:03:11.281%20--%3E%2000:03:15.599%0D%0AYou%20can%20place%20it%20as%20an%20iterable%20collection%0D%0Ain%20a%20for%20loop.%0D%0A%0D%0A00:03:15.600%20--%3E%2000:03:20.349%0D%0AAnd%20that%20would%20allow%20you%20to%20iterate%20over%20the%0D%0Aelements%20of%20the%20list%20very%20simply,%20very%20elegantly%0D%0A%0D%0A00:03:20.350%20--%3E%2000:03:21.450%0D%0Ain%20this%20list.%0D%0A%0D%0A"}')