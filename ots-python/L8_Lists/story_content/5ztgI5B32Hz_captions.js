window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.390%20--%3E%2000:00:06.600%0D%0AOkay,%20so%20generally%20speaking,%20a%20list%20would%0D%0Abe%20a%20mutable,%20iterable,%20sequential%0D%0A%0D%0A00:00:06.601%20--%3E%2000:00:12.769%0D%0Acollection.%20So%20yeah,%20it%20makes%20sense%20that%0D%0Ait%20is%20a%20collection%20that%20would%20store%20a%0D%0A%0D%0A00:00:12.770%20--%3E%2000:00:21.150%0D%0Afew%20datas%20in%20it,%20but%20but%20as%20we%20go%20on%0D%0Aduring%20the%20lesson%20today,%20I%20will%20try%20to%0D%0A%0D%0A00:00:21.151%20--%3E%2000:00:25.200%0D%0Agive%20some%20more%20meaning%20to%20the%0D%0Aother%20terms%20here%20like%20mutable,%20iterable,%0D%0A%0D%0A00:00:25.201%20--%3E%2000:00:32.700%0D%0Aand%20sequential.%20Let\u0027s%20get%20started%20just%20to%0D%0Aget%20the%20basic%20idea%20of%20lists.%20So%20the%20basic%0D%0A%0D%0A00:00:32.701%20--%3E%2000:00:39.770%0D%0Asyntax%20-%20we%20can%20create%20a%20variable,%20lst,%20and%0D%0Athen%20put%20in%20or%20have%20that%20variable%0D%0A%0D%0A00:00:39.771%20--%3E%2000:00:45.570%0D%0Areference%20a%20list.%20The%20Python%20way%20to%0D%0Acreate%20a%20list%20is%20enclosed%20in%20square%0D%0A%0D%0A00:00:45.571%20--%3E%2000:00:51.420%0D%0Abrackets.%20We%20can%20just%20separate%20our%20values%0D%0Aby%20commas,%20so%20we%20can,%20in%20this%20case,%20we%0D%0A%0D%0A00:00:51.421%20--%3E%2000:00:58.410%0D%0Acreated%20the%20list%20of%201,%202,%20and%203.%20Once%20we%20do%0D%0Athat,%20in%20our%20memory%20we%20would%20have%20a%0D%0A%0D%0A00:00:58.411%20--%3E%2000:01:04.259%0D%0Asequence%20of%20references%20to%20the%20data%201,%0D%0A2,%20\u0026amp;%203.%20That%20is%20basically%20the%20memory%0D%0A%0D%0A00:01:04.260%20--%3E%2000:01:08.520%0D%0Aimage%20that%20would%20be%20created,%20or%20the%0D%0Ainternal%20memory%20representation%20that%0D%0A%0D%0A00:01:08.521%20--%3E%2000:01:15.780%0D%0Awould%20be%20created,%20when%20we%20execute%20this%0D%0Akind%20of%20an%20expression.%20And%20then%20lst%20would%0D%0A%0D%0A00:01:15.781%20--%3E%2000:01:21.390%0D%0Abe%20a%20variable%20that%20would%20reference%20this%0D%0Acollection%20of%20integers,%20in%20this%20case,%0D%0A%0D%0A00:01:21.391%20--%3E%2000:01:27.810%0D%0Aof%201,%202,%20and%203.%20If%20we%20try%20to%20access%20this%0D%0Avariable%20lst,%20get%20the%20value%20of%20lst,%20Python%0D%0A%0D%0A00:01:27.811%20--%3E%2000:01:33.330%0D%0Awould%20respond%20by%20printing%20basically%0D%0Aagain%20square%20brackets%201,%202,%20and%203.%20If%20we%20ask%0D%0A%0D%0A00:01:33.331%20--%3E%2000:01:38.159%0D%0Awhat%20the%20type%20of%20lst%20is,%20Python%20would%0D%0Arespond%20by%20saying%20that%20this%20object%20is%20of%0D%0A%0D%0A00:01:38.160%20--%3E%2000:01:46.229%0D%0Atype%20list,%20is%20a%20class%20list%20object.%20So%0D%0Ayeah,%20so%20you%20can%20definitely%20see%20that%20a%0D%0A%0D%0A00:01:46.230%20--%3E%2000:01:52.259%0D%0Alist%20is%20a%20collection,%20in%20this%20case%20a%0D%0Acollection%20of%203%20elements:%201,%202,%20and%203.%20But%20we%0D%0A%0D%0A00:01:52.260%20--%3E%2000:01:58.409%0D%0Aalso%20mentioned%20that%20lists%20are%20sequential%0D%0Acollections.%20We\u0027ve%20already%20seen%0D%0A%0D%0A00:01:58.410%20--%3E%2000:02:03.540%0D%0Asequential%20entities%20such%20as%20strings.%0D%0ABasically%20it%20means%20that%20the%20objects%20or%0D%0A%0D%0A00:02:03.541%20--%3E%2000:02:09.750%0D%0Athe%20elements%20inside%20this%20collection%20can%0D%0Abe%20accessed%20using%20indices.%20So%20for%20this%0D%0A%0D%0A00:02:09.751%20--%3E%2000:02:13.950%0D%0Alist,%20we%20also%20have%20the%20indices%200,%201,%20and%202,%0D%0Abasically%20referring%0D%0A%0D%0A00:02:13.951%20--%3E%2000:02:18.209%0D%0Ato%20the%20first,%20second,%20and%20third%20element.%0D%0AAnd%20then,%20in%20order%20to%20access%20a%20specific%0D%0A%0D%0A00:02:18.210%20--%3E%2000:02:24.780%0D%0Aelement,%20we%20can%20use%20the%20indexing%0D%0Asyntax%20-%20lst%20index%20one%20-%20that%20would,%20in%20this%0D%0A%0D%0A00:02:24.781%20--%3E%2000:02:34.170%0D%0Acase,%20return%20the%202.%20Regarding%20the%0D%0Afact%20that%20lists%20are%20iterable,%20we\u0027ll%20see%0D%0A%0D%0A00:02:34.171%20--%3E%2000:02:38.580%0D%0Athat%20later%20on,%20but%20I%20guess%20you%20have%20a%0D%0Asense%20of%20what%20an%20iterable%20collection%20is.%0D%0A%0D%0A00:02:38.581%20--%3E%2000:02:42.510%0D%0AJust%20as%20strings%20are%20iterable%20and%20you%20can%0D%0Ause%20a%20for%20loop%20in%20order%20to%20iterate%0D%0A%0D%0A00:02:42.511%20--%3E%2000:02:46.860%0D%0Aover%20them,%20I%20guess%20it\u0027s%20going%20to%20be%20very%0D%0Asimilar%20in%20in%20terms%20of%20lists.%20But%20we%20will%0D%0A%0D%0A00:02:46.861%20--%3E%2000:02:51.209%0D%0Asee%20that%20in%20more%20detail%20later%20on.%0D%0ARegarding%20mutability,%20that\u0027s%20a%20very%0D%0A%0D%0A00:02:51.210%20--%3E%2000:02:55.620%0D%0Asignificant%20property%20of%20a%20list.%20We\u0027ll%0D%0Atalk%20about%20it%20in%20much%20more%20detail%20later%0D%0A%0D%0A00:02:55.621%20--%3E%2000:03:01.799%0D%0Aon,%20but%20I%20want%20to%20give%20you%20the%20first%0D%0Ataste%20of%20the%20mutability.%20A%20list%20object%0D%0A%0D%0A00:03:01.800%20--%3E%2000:03:05.040%0D%0Asupports%20this%20kind%20of%20an%20expression:%0D%0A%0D%0A00:03:05.041%20--%3E%2000:03:07.860%0D%0Alst%201,%20for%20example,%20equals%2020.%20In%20this%20case%20we%0D%0A%0D%0A00:03:07.861%20--%3E%2000:03:14.849%0D%0Aare%20setting%20the%20the%20reference%20of%20lst%201%20to%0D%0Achange%20from%20currently%20pointing%20to%202,%20to%0D%0A%0D%0A00:03:14.850%20--%3E%2000:03:20.760%0D%0Apoint%20to%20a%20different%20object,%20in%20this%20case%0D%0A20,%20so%20lst%20after%20this%20assignment%20would%0D%0A%0D%0A00:03:20.761%20--%3E%2000:03:27.590%0D%0Abasically%20be,%20or%20would%20mutate,%20we%20would%0D%0Aupdate,%20would%20change,%20and%20then%20the%20new%0D%0A%0D%0A00:03:27.591%20--%3E%2000:03:35.220%0D%0Acollection%20would%20contain%20basically%201,%2020,%0D%0Aand%203.%20The%20fact%20that%20we%20can%20change%20an%0D%0A%0D%0A00:03:35.221%20--%3E%2000:03:40.079%0D%0Aelement%20from%20pointing%20to%20one%20object%20to%0D%0Apoint%20to%20another%20object,%20as%20we\u0027ve%20done%0D%0A%0D%0A00:03:40.080%20--%3E%2000:03:44.730%0D%0Ahere,%20lst%201%20equals%2020,%0D%0Athat\u0027s%20a%20new%20thing.%20For%20strings%20-%0D%0A%0D%0A00:03:44.731%20--%3E%2000:03:47.609%0D%0AYou%20can%20try%20it%20out%20in%20strings%20and%20you%0D%0Asee%20that%20it%20won\u0027t%20work.%0D%0A%0D%0A00:03:47.610%20--%3E%2000:03:53.190%0D%0ALists%20are%20mutable%20objects%20or%20mutable%0D%0Acollections,%20therefore%20we%20are%20allowed%20to%0D%0A%0D%0A00:03:53.191%20--%3E%2000:03:57.480%0D%0Ado%20that.%20There%20are%20more%20consequences%20of%0D%0Athe%20fact%20that%20lists%20are%20mutable%20and%0D%0A%0D%0A"}')