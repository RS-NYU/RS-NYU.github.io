window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.360%20--%3E%2000:00:05.730%0D%0AOkay,%20let\u0027s%20start%20implementing%20the%0D%0Aversion%20that%20creates%20a%20new%20list%20object.%0D%0A%0D%0A00:00:05.731%20--%3E%2000:00:10.049%0D%0ASo%20our%20function%20name%20is%20create%20square%0D%0Alist,%20it\u0027s%20given%20a%20list%20LST%20as%20a%0D%0A%0D%0A00:00:10.050%20--%3E%2000:00:14.009%0D%0Aparameter.%0D%0ASo%20basically%20we\u0027re%20supposed%20to%20create%20a%0D%0A%0D%0A00:00:14.010%20--%3E%2000:00:20.400%0D%0Anew%20list%20object%20where%20the%20elements%20are%0D%0Athe%20corresponding%20square%20values%20of%20the%0D%0A%0D%0A00:00:20.401%20--%3E%2000:00:26.609%0D%0Aoriginal%20list.%20So%20in%20order%20to%20create%20a%0D%0Anew%20list,%20let\u0027s%20start%20with%20an%20empty%20list%0D%0A%0D%0A00:00:26.610%20--%3E%2000:00:33.840%0D%0Aand%20by%20using%20the%20Python%20literal%20we\u0027re%0D%0Acreating%20a%20new%20empty%20list%20object.%20We\u0027ll%0D%0A%0D%0A00:00:33.841%20--%3E%2000:00:39.270%0D%0Aprobably%20add%20more%20elements%20to%20that%20new%0D%0Alist%20object.%20It%20would%20accumulate%20them%20at%0D%0A%0D%0A00:00:39.271%20--%3E%2000:00:46.020%0D%0Anew%20places%20in%20the%20memory.%20Eventually%20we%0D%0Awill%20return%20this%20res%20LST%20object.%20And%0D%0A%0D%0A00:00:46.021%20--%3E%2000:00:51.510%0D%0Ain%20order%20to%20add%20the%20right%20elements,%20we\u0027ll%0D%0Ajust%20iterate%20over%20the%20elements%20in%20LST,%20so%0D%0A%0D%0A00:00:51.511%20--%3E%2000:01:01.230%0D%0Afor%20elem%20in%20LST,%20and%20for%20each%20element%20let\u0027s%0D%0Aadd%20elem%20square%20to%20the%20end%20of%20our%20res%20LST%0D%0A%0D%0A00:01:01.231%20--%3E%2000:01:07.140%0D%0Aobject.%20So%20we%20created%20a%20new%20list%20object,%0D%0Aadded%20more%20and%20more%20elements%20to%20it,%0D%0A%0D%0A00:01:07.141%20--%3E%2000:01:13.200%0D%0Abasically%20mutated%20it,%20but%20since%20we\u0027re%0D%0Amutating%20a%20new%20object,%20the%20original%20LST%0D%0A%0D%0A00:01:13.201%20--%3E%2000:01:18.500%0D%0Aremains%20as%20is.%20Let\u0027s%20take%20a%20look%20at%20how%0D%0Ait%20really%20operates%20in%20the%20memory.%20So%0D%0A%0D%0A00:01:18.501%20--%3E%2000:01:23.790%0D%0Aassuming%20we%20have%20a%20list%20object%20outside%0D%0Aof%20this%20function,%20in%20a%20main%20function%20or%0D%0A%0D%0A00:01:23.791%20--%3E%2000:01:29.690%0D%0Asome%20other%20function,%20containing%20for%0D%0Aexample%20[1,%202,%203],%20when%20we%20call%20this%20function%0D%0A%0D%0A00:01:29.691%20--%3E%2000:01:36.480%0D%0Ait%20uses%20a%20few%20variables.%20It%20has%20the%0D%0Aparameter%20LST.%20It%20has%20elem%20that%20we\u0027re%0D%0A%0D%0A00:01:36.481%20--%3E%2000:01:43.400%0D%0Aiterating%20with,%20and%20it%20has%20the%20res%20LST.%20So%0D%0Ainitially%20LST%20references%20the%0D%0A%0D%0A00:01:43.401%20--%3E%2000:01:49.170%0D%0Aargument,%20basically%20the%20list%20from%20the%0D%0Acalling%20function,%20so%20they%20both%20point%20to%0D%0A%0D%0A00:01:49.171%20--%3E%2000:01:53.400%0D%0Athe%20same%20position%20in%20the%20memory.%20Then%0D%0Awe\u0027re%20creating%20a%20new%20list%20object,%0D%0A%0D%0A00:01:53.401%20--%3E%2000:01:59.700%0D%0Ares%20LST,%20that%20references%20an%20empty%20list.%0D%0ASo%20you%20see%20that%20res%20LST%20points%20to%20a%0D%0A%0D%0A00:01:59.701%20--%3E%2000:02:05.270%0D%0Atotally%20different%20position%20in%20the%20memory.%0D%0AAnd%20then%20we%20start%20iterating%20over%20the%0D%0A%0D%0A00:02:05.271%20--%3E%2000:02:09.060%0D%0Aelements%20of%20the%20list,%20basically%0D%0Areferencing%20each%20one%20of%20the%20elements.%20So%0D%0A%0D%0A00:02:09.061%20--%3E%2000:02:14.099%0D%0Afirst%20iteration,%20elem%20references%20the%20first%0D%0Aelement%20in%20LST,%20references%20the%20one.%0D%0A%0D%0A00:02:14.100%20--%3E%2000:02:21.120%0D%0AThen%20we%20should%20append%20one%20squared%20to%20res%0D%0ALST.%20That%20would%20mutate%20the%20res%20LST%0D%0A%0D%0A00:02:21.121%20--%3E%2000:02:25.139%0D%0Aobject,%20so%20the%20res%20LST,%20instead%20of%0D%0Apointing%20to%20an%20empty%20list,%20would%20now%0D%0A%0D%0A00:02:25.140%20--%3E%2000:02:32.489%0D%0Areference%20the%20list%20containing%20one%0D%0Asquared,%20which%20is%201.%20And%20then%20elem%20would%0D%0A%0D%0A00:02:32.490%20--%3E%2000:02:38.340%0D%0Areference%20the%20second%20element%20in%20our%20list%0D%0Athat%20we%20are%20iterating,%20basically%20references%0D%0A%0D%0A00:02:38.341%20--%3E%2000:02:45.810%0D%0Atwo.%20We\u0027ll%20square%202%20and%20add%20it%20to%20the%20end%0D%0Aof%20res%20LST,%20so%20now%20res%20LST%20would%20be%201%0D%0A%0D%0A00:02:45.811%20--%3E%2000:02:51.120%0D%0A\u0026amp;%204.%20Know%20that%20the%20append%20method%20mutates%0D%0Athe%20calling%20object,%20but%20the%20calling%0D%0A%0D%0A00:02:51.121%20--%3E%2000:02:56.069%0D%0Aobject%20that%20it%20mutates%20is%20the%20new%0D%0Alist%20that%20we\u0027re%20constructing.%20It%20doesn\u0027t%0D%0A%0D%0A00:02:56.070%20--%3E%2000:03:02.250%0D%0Aaffect%20the%20original%20list%20we\u0027re%20working%0D%0Aon.%20So%20we%20have%20res%20LST%20currently%20with%0D%0A%0D%0A00:03:02.251%20--%3E%2000:03:07.769%0D%0A1%20\u0026amp;%204,%20and%20finally%20elem%20would%20reference%203.%0D%0AWe%20would%20calculate%203%20squared,%20which%20is%209,%0D%0A%0D%0A00:03:07.770%20--%3E%2000:03:12.180%0D%0Aand%20we%20would%20mutate%20res%20LST%20to%20add%209%0D%0Ato%20its%20end.%0D%0A%0D%0A00:03:12.181%20--%3E%2000:03:16.799%0D%0ASo%20now%20res%20LST%20is%20the%20new%20list%20object.%0D%0AThe%20original%20list%20remained%20[1,%202,%203].%0D%0A%0D%0A00:03:16.800%20--%3E%2000:03:22.979%0D%0Ares%20LST%20is%20now%20[1,%204,%209],%20which%20we%0D%0Areturn.%20Therefore%20we%20created,%20we%0D%0A%0D%0A"}')