window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.000%20--%3E%2000:00:08.120%0D%0AA%20program:%20So%20I\u0027ll%20define%20a%20main%20function%0D%0Athat%20we\u0027re%20gonna%20write%20here.%20I\u0027m%20thinking%0D%0A%0D%0A00:00:08.121%20--%3E%2000:00:16.049%0D%0Athat%20we...%20obviously%20we\u0027re%20going%20to%20break%0D%0Athis%20problem%20into%20sub%20tasks,%20so%0D%0A%0D%0A00:00:16.050%20--%3E%2000:00:21.840%0D%0Abasically%20into%20functions.%20So%20that%20got%0D%0Ame%20thinking%20of%20what%20are%20the%20major%20steps%0D%0A%0D%0A00:00:21.841%20--%3E%2000:00:26.910%0D%0Awe\u0027re%20gonna%20take%20here.%20So%20it%20seems%20like%0D%0Awe\u0027re%20gonna%20read%20the%20input,%20then%20we\u0027ll%0D%0A%0D%0A00:00:26.911%20--%3E%2000:00:31.170%0D%0Afigure%20out%20the%20average,%20and%20then%20we\u0027ll%0D%0Afilter%20the%20ones%20that%20are%20above%20the%0D%0A%0D%0A00:00:31.171%20--%3E%2000:00:36.840%0D%0Aaverage.%20It%20seems%20like%20we%20have%20like%20three%0D%0Amajor%20steps%20here.%20We%20could,%20if%20we%20really%0D%0A%0D%0A00:00:36.841%20--%3E%2000:00:43.140%0D%0Ainsist,%20kind%20of%20combine%20or%20merge%20the%20two,%0D%0Afirst%20two%20steps%20together.%20Like%20we%20could%0D%0A%0D%0A00:00:43.141%20--%3E%2000:00:48.600%0D%0Acalculate%20the%20average%20during%20the%0D%0Areading%20step,%20right?%20We\u0027ve%20already%20done%0D%0A%0D%0A00:00:48.601%20--%3E%2000:00:53.399%0D%0Athat%20when%20we%20kind%20of%20accumulated%20the%20sum%0D%0Aand%20counted%20the%20number%20of%20elements%0D%0A%0D%0A00:00:53.400%20--%3E%2000:01:02.340%0D%0Aduring%20the%20reading%20phase.%20But%20I%20would%0D%0Aargue%20that%20it%20is%20better%20to%20keep%20it%20as%0D%0A%0D%0A00:01:02.341%20--%3E%2000:01:08.070%0D%0Athree%20separate%20steps%20because%20then%20these%0D%0Afunctions%20could%20be%20reused%20and%20not%0D%0A%0D%0A00:01:08.071%20--%3E%2000:01:13.860%0D%0Anecessarily%20always%20bind%20together.%0D%0ASo%20if%20we\u0027ll%20have%20a%20function%20to%20read%20the%0D%0A%0D%0A00:01:13.861%20--%3E%2000:01:18.659%0D%0Adata%20and%20a%20function%20to%20calculate%20the%0D%0Aaverage%20and%20a%20function%20later%20to%20filter%0D%0A%0D%0A00:01:18.660%20--%3E%2000:01:25.439%0D%0Athe%20ones%20that%20are%20above,%20then%20we%20can%0D%0Areuse%20these%20functions%20in%20other%20programs%0D%0A%0D%0A00:01:25.440%20--%3E%2000:01:29.850%0D%0Aas%20well.%20If%20we\u0027ll%20combine%20the%20read%20and%0D%0Athe%20calculate,%20we%20cannot%20use%20a%20read%0D%0A%0D%0A00:01:29.851%20--%3E%2000:01:36.840%0D%0Afunction%20for%20other%20purposes%20or%20use%20the%0D%0Acalculate%20average%20when%20we%20are%20not%0D%0A%0D%0A00:01:36.841%20--%3E%2000:01:40.350%0D%0Ainterested%20in%20reading%20from%20the%20user%20when%0D%0Awe\u0027ll%20have%20like%20our%20data%20from%20another%0D%0A%0D%0A00:01:40.351%20--%3E%2000:01:45.479%0D%0Asource%20or...%20%20So%20I%20think%20separating%20it%0D%0Ainto%20these%20three%20steps%20is%20the%20first%0D%0A%0D%0A00:01:45.480%20--%3E%2000:01:53.189%0D%0Aobservation%20we%20should%20make%20here.%20So%20we%0D%0Awould%20have...%20So%20it%20should%20start%0D%0A%0D%0A00:01:53.190%20--%3E%2000:01:58.219%0D%0Asomething%20like%20that.%20First%20the%20program%0D%0Awould%20print%20the%20instruction%20so,%20%22Enter%0D%0A%0D%0A00:01:58.220%20--%3E%2000:02:11.630%0D%0Agrades%20in%20separate%20lines.%20To%20end%20the%0D%0Ainput,%0D%0A%0D%0A00:02:11.631%20--%3E%2000:02:26.400%0D%0Atype%20\u0027done\u0027.%22%20So%20we%20got%20that.%20And%20now%20we%0D%0Ashould%20read%20the%20data.%20So%20let\u0027s%20assume%20we%0D%0A%0D%0A00:02:26.401%20--%3E%2000:02:33.650%0D%0Ahave...%20we\u0027ll%20implement%20it%20in%20a%20second,%0D%0Abut%20let\u0027s%20assume%20we%20have%20a%20function,%20read%0D%0A%0D%0A00:02:33.651%20--%3E%2000:02:42.780%0D%0Alist,%20that...%20At%20this%20point%20I%20won\u0027t%0D%0Aimplement%20it.%20I\u0027ll%20just%20write%20pass.%20Pass%0D%0A%0D%0A00:02:42.781%20--%3E%2000:02:48.930%0D%0Ais%20an%20instruction%20that%20basically%20does%0D%0Anothing.%20So%20I\u0027ll%20just%20wait%20with%0D%0A%0D%0A00:02:48.931%20--%3E%2000:02:54.209%0D%0Athe%20implementation%20for%20a%20second.%20Let\u0027s%0D%0Acall%20it.%20So%20I%20asked%20the%20user%20to%20enter%0D%0A%0D%0A00:02:54.210%20--%3E%2000:03:01.550%0D%0Agrades.%20And%20then%20I%20would%20have%20grades,%0D%0Awhatever%20read%20list%0D%0A%0D%0A00:03:01.551%20--%3E%2000:03:07.650%0D%0Awould%20return.%20Okay,%20so%20read%20list,%20when%0D%0Acalled%20it%20would%20communicate%20with%20the%0D%0A%0D%0A00:03:07.651%20--%3E%2000:03:15.630%0D%0Auser,%20read%20the%20data%20stored%20in%20a%20list,%20and%0D%0Areturned%20that%20sequence%20of%20data%20back.%20And%0D%0A%0D%0A00:03:15.631%20--%3E%2000:03:22.950%0D%0Ain%20our%20case,%20it%20would%20go%20into%20the%20grades%0D%0Alist%20variable%20here.%20Note%20that%20read%20list%0D%0A%0D%0A00:03:22.951%20--%3E%2000:03:27.600%0D%0Adoesn\u0027t%20get%20any%20parameter%20from%20the%0D%0Aprogrammer,%20from%20the%20one%20that%20calls%20the%0D%0A%0D%0A00:03:27.601%20--%3E%2000:03:33.120%0D%0Afunction.%20It%20would%20ask%20or%20wait%20for%20input%0D%0Afrom%20the%20user,%0D%0A%0D%0A00:03:33.121%20--%3E%2000:03:40.410%0D%0Abut%20not%20from%20the%20programmer%20that%20calls%20this%0D%0Afunction.%20Yeah,%20let\u0027s%20go%20ahead%20and%0D%0A%0D%0A00:03:40.411%20--%3E%2000:03:46.530%0D%0Aimplement%20it%20really%20quick.%20Though%20a%20lot%0D%0Aof%20times%20I%20like%20to%20write%20my%20main%20all%0D%0A%0D%0A00:03:46.531%20--%3E%2000:03:52.620%0D%0Atogether%20and%20then%20start%20implementing%20it%0D%0Afunction%20by%20function,%20but%20let\u0027s%20do%20the%0D%0A%0D%0A00:03:52.621%20--%3E%2000:04:00.900%0D%0Aread%20list.%20It%20seems%20like%20a%20function%20we%0D%0Acan%20we%20can%20do%20right%20away.%20So%20read%20list%0D%0A%0D%0A00:04:00.901%20--%3E%2000:04:07.320%0D%0Abasically%20should%20read%20data%20from%20the%20user%0D%0Anumber%20after%20number,%20basically%20grade%20after%0D%0A%0D%0A00:04:07.321%20--%3E%2000:04:13.760%0D%0Agrade%20\u0027til%20they%20type%20done.%20If%20you%0D%0Aremember,%20we\u0027ve%20used%20this%20kind%20of%20a%0D%0A%0D%0A00:04:13.761%20--%3E%2000:04:22.740%0D%0Atemplate,%20this%20kind%20of%20pattern%20that%20reads%0D%0Adata%20or%20iterates%20over%20data%20until%20it%20sees%0D%0A%0D%0A00:04:22.741%20--%3E%2000:04:27.630%0D%0A%22done%22.%20So%0D%0Awe\u0027ll%20have%20a%20boolean%20variable,%20seen%20done,%0D%0A%0D%0A00:04:27.631%20--%3E%2000:04:35.580%0D%0Athat%20would%20be%20initialized%20to%20false%0D%0Ainitially,%20and%20then%20we\u0027ll%20have%20a%20while%0D%0A%0D%0A00:04:35.581%20--%3E%2000:04:42.840%0D%0Astatement%20while%20we\u0027ll%20figure%20out%20the%0D%0Acondition%20in%20a%20few%20minutes.%20But%20while,%0D%0A%0D%0A00:04:42.841%20--%3E%2000:04:49.500%0D%0Abasically,%20we%20want%20to%20keep%20on%20going.%20Each%0D%0Atime%20we\u0027ll%20read%20an%20input%20and%20store%20it%20in%20a%20list.%0D%0A%0D%0A00:04:49.501%20--%3E%2000:04:53.190%0D%0ARead%20an%20input,%20store%20it%20in%20a%20list.%20Read%20an%20input,%20store%20it%20in%20a%20list.%20Now%20in%20order%20to%20be%20able%20to%20store%20it%0D%0A%0D%0A00:04:53.191%20--%3E%2000:04:59.280%0D%0Ain%20a%20list,%20we\u0027ll...%20before%20we%20get%20started%0D%0Awe\u0027ll%20have%20the%20res%20list%20variable%0D%0A%0D%0A00:04:59.281%20--%3E%2000:05:03.990%0D%0Ainitialized%20to%20an%20empty%20list%20so%20we%20can%0D%0Ajust%20add%20more%20items%20to%20it%20-%20something%0D%0A%0D%0A00:05:03.991%20--%3E%2000:05:10.200%0D%0Asimilar%20to%20what%20we\u0027ve%20done%20in%20the%20roll%0D%0Athe%20dice%20example%20before.%20And%20then%20each%0D%0A%0D%0A00:05:10.201%20--%3E%2000:05:20.790%0D%0Aiteration%20we%20said%20current%20input%20equals%0D%0Ainput.%20Note%20that%20I\u0027m%20not%20converting%20it%0D%0A%0D%0A00:05:20.791%20--%3E%2000:05:27.420%0D%0Ato%20an%20int%20at%20this%20point%20because%20the%0D%0Ainput%20could%20be%20the%20%22done%22%20word%20as%20well,%20so%0D%0A%0D%0A00:05:27.421%20--%3E%2000:05:34.700%0D%0AI\u0027m%20keeping%20it%20as%20a%20string.%20And%20then%20I\u0027m%0D%0Afirst%20checking%20if%20the%20current%20input%20is%0D%0A%0D%0A00:05:34.701%20--%3E%2000:05:52.320%0D%0Athe%20word%20%22done%22.%20Then%20I%20just%20raise%20the%20flag,%0D%0Aseen%20done%20would%20be%20true,%20otherwise%20now%20I%0D%0A%0D%0A00:05:52.321%20--%3E%2000:05:57.870%0D%0Aknow%20that%20it\u0027s%20a%20number%20I%20can%20convert%20it%0D%0Ato%20an%20int.%20So%20curr%20would%20be%20the%20int%0D%0A%0D%0A00:05:57.871%20--%3E%2000:06:04.140%0D%0Aconversion%20of%20the%20current%20input%20which%0D%0Awas%20a%20string%20and%20then%20I%20can%20just%20add%20it%0D%0A%0D%0A00:06:04.141%20--%3E%2000:06:11.820%0D%0Ato%20the%20list.%0D%0ASo%20res%20list%20dot%20append%20of%20this%20current%0D%0A%0D%0A00:06:11.821%20--%3E%2000:06:21.780%0D%0Anumber.%20Yeah,%20that%20is%20basically%20it%20for%20the%0D%0Afor%20the%20read%20list.%20So%20make%20sure%20you%0D%0A%0D%0A00:06:21.781%20--%3E%2000:06:29.160%0D%0Asee...%20we%20kind%20of%20have%20these%20two%0D%0Alayers%20here%20for%20making%20this%20thing%20work.%0D%0A%0D%0A00:06:29.161%20--%3E%2000:06:36.210%0D%0AWe%20have%20the%20layer%20that%20controls%20the%0D%0Arepetitions%20using%20the%20flag%20seen%20done%0D%0A%0D%0A00:06:36.211%20--%3E%2000:06:40.560%0D%0Athat%20is%20initialized%20to%20false,%0D%0Aand%20then%20updating%0D%0A%0D%0A00:06:40.561%20--%3E%2000:06:47.729%0D%0Athe%20flag%20if%20we\u0027ve%20seen%20done.%20And%20we%20have%0D%0Aaccumulating%20the%20list%20that%20we%20basically%0D%0A%0D%0A00:06:47.730%20--%3E%2000:06:53.490%0D%0Astarted,%20the%20res%20list%20with%20an%20empty%0D%0Alist,%20and%20then%20each%20time%20we\u0027re%20adding%0D%0A%0D%0A00:06:53.491%20--%3E%2000:06:59.810%0D%0Amore%20and%20more%20items%20to%20this%20list.%20By%20the%0D%0Away%20at%20the%20end,%20we%20would%20need%20to%20return%0D%0A%0D%0A00:06:59.811%20--%3E%2000:07:07.340%0D%0Athis%20res%20list%20that%20we%20accumulated.%20We%0D%0Awant%20to%20keep%20going.%20Still%0D%0A%0D%0A00:07:07.341%20--%3E%2000:07:17.339%0D%0Ahave%20the%20value%20false.%20So%20yeah,%20it%20seems%0D%0Alike%20this%20is%20kind%20of%20what%20we%20need%20to%20do%0D%0A%0D%0A00:07:17.340%20--%3E%2000:07:22.499%0D%0Ahere%20in%20order%20to%20read%20the%20data.%20Again,%20if%0D%0Ayou\u0027re%20not%20comfortable%20with%20this%0D%0A%0D%0A00:07:22.500%20--%3E%2000:07:28.740%0D%0Aimplementation,%20go%20back%20to%20where%20we\u0027ve%0D%0Atalked%20about%20using%20flags%20in%20order%20to%0D%0A%0D%0A00:07:28.741%20--%3E%2000:07:35.339%0D%0Aread%20a%20sequence%20of%20a%20length%20that%20is%20not%0D%0Aknown%20up%20front,%20and%20see%20that%20you%20are%0D%0A%0D%0A00:07:35.340%20--%3E%2000:07:40.550%0D%0Acomfortable%20with%20this%20kind%20of%20layer.%20And%0D%0Athen%20you\u0027ll%20see%20how%20we%20combine%20them%0D%0A%0D%0A00:07:40.551%20--%3E%2000:07:45.240%0D%0Acorrectly.%20But%20okay,%20so%20assuming%20we%20have%0D%0Athe%20read%20list%20function,%0D%0A%0D%0A00:07:45.241%20--%3E%2000:07:50.370%0D%0Aour%20main%20would%20call%20read%20list,%20store%20the%0D%0Alist%0D%0A%0D%0A00:07:50.371%20--%3E%2000:07:57.300%0D%0Aread%20from%20the%20user%20in%20a%20grades%20list%0D%0Avariable.%20Then...%20so%20we\u0027ve%20done%20step%0D%0A%0D%0A00:07:57.301%20--%3E%2000:08:03.149%0D%0Aone.%20Step%201%20is%20reading%20the%20input.%20Step%202%0D%0Awould%20be%20calculating%20the%20average.%20For%0D%0A%0D%0A00:08:03.150%20--%3E%2000:08:12.210%0D%0Athat,%20I%20would%20probably%20have%20a%20function.%20So%0D%0Alet\u0027s%20define...%20I\u0027ll%20name%20this%0D%0A%0D%0A00:08:12.211%20--%3E%2000:08:22.529%0D%0Afunction%20calculate%20average.%20It%0D%0Awould%20be%20given%20a%20list,%20right?%20And%20it%20would%0D%0A%0D%0A00:08:22.530%20--%3E%2000:08:27.599%0D%0Areturn%20the%20average%20of%20this%20list.%20I\u0027ll%0D%0Aimplement%20it%20in%20a%20second,%20so%20I\u0027ll%20just%0D%0A%0D%0A00:08:27.600%20--%3E%2000:08:33.510%0D%0Awrite%20pass%20at%20this%20point.%20Our%20main,%20after%0D%0Areading%20the%20list,%20would%20obviously%20call%0D%0A%0D%0A00:08:33.511%20--%3E%2000:08:38.539%0D%0Athe%20calc%20average%20function%20to%20calculate%0D%0Athe%20average.%20So%20I\u0027ll%20have%20an%20average%0D%0A%0D%0A00:08:38.540%20--%3E%2000:08:46.649%0D%0Avariable%20that%20would%20be%20assigned%20to%0D%0Awhatever%20calc%20average%20would%20return%20when%0D%0A%0D%0A00:08:46.650%20--%3E%2000:08:54.570%0D%0Ait\u0027s%20executed%20on%20our%20grades%20list,%20right?%0D%0ASo%20grades%20list,%20that\u0027s%20the%20list%20that%0D%0A%0D%0A00:08:54.571%20--%3E%2000:08:58.350%0D%0Awe%20just%20read%20from%20the%20user.%20Again,%20take%0D%0Aa%20look%20at%20this%20main.%20We\u0027re%20asking%20the%0D%0A%0D%0A00:08:58.351%20--%3E%2000:09:04.890%0D%0Auser%20to%20write%20the%20input,%20type%20the%20input.%0D%0AWe%20are%20reading%20the%20list%20into%20grades%20list,%0D%0A%0D%0A00:09:04.891%20--%3E%2000:09:11.280%0D%0Aand%20then%20we\u0027re%20calculating%20the%20average%0D%0Aof%20this%20grades%20list,%20storing%20the%20value%20back%0D%0A%0D%0A00:09:11.281%20--%3E%2000:09:18.090%0D%0Ain%20average.%20Let\u0027s%20go%20ahead%20and%20announce%0D%0Ato%20the%20user.%20Let\u0027s%20print%20that%20the%20class%0D%0A%0D%0A00:09:18.091%20--%3E%2000:09:30.570%0D%0Aaverage%20is%20whatever%20the%20average%20is.%20So,%0D%0A%22The%20average%20is..%22%20and%20here%20we\u0027ll%20just%20put%20the%0D%0A%0D%0A00:09:30.571%20--%3E%2000:09:39.390%0D%0Aaverage%20value.%20So%20we\u0027re%20done%20with%20the%0D%0Asecond%20step.%20So%20we%20read%20the%20grades.%20We%0D%0A%0D%0A00:09:39.391%20--%3E%2000:09:43.620%0D%0Acalculated%20the%20average.%20Now%20we%20need%20to%0D%0Afind%20the%20ones%20that%20are%20above%20the%20average.%0D%0A%0D%0A00:09:43.621%20--%3E%2000:09:49.920%0D%0AOh,%20obviously%20we%20need%20to%20implement%20the%0D%0Acalculate%20average%20function%20in%20order%20to%0D%0A%0D%0A00:09:49.921%20--%3E%2000:09:57.480%0D%0Ado%20that.%20That\u0027s%20pretty%20easy.%20We%20just%20need%0D%0Ato%20add%20the%20numbers%20in%20our%20list%20and%20then%0D%0A%0D%0A00:09:57.481%20--%3E%2000:10:04.200%0D%0Athe%20average%20would%20be%20that%20sum%20divided%20by%0D%0Athat%20length%20of%20the%20list%20or%20the%20number%20of%0D%0A%0D%0A00:10:04.201%20--%3E%2000:10:15.690%0D%0Aelements%20in%20the%20list.%20So%20I\u0027ll%20have...%20I%20don\u0027t%0D%0Aknow...%20sum%20elems%20that%20would%20be%0D%0A%0D%0A00:10:15.691%20--%3E%2000:10:21.780%0D%0Ainitialized%20to%20zero.%20And%20then%20using%20the%0D%0Afor%20loop,%20and%20in%20this%20case%20since%20I%20want%0D%0A%0D%0A00:10:21.781%20--%3E%2000:10:26.460%0D%0Ato%20add%20the%20elements%20of%20the%20list,%20I%20can%0D%0Aiterate%20over%20the%20elements%20of%20the%20list%20by%0D%0A%0D%0A00:10:26.461%20--%3E%2000:10:37.440%0D%0Ausing%20the%20fact%20that%20lists%20are%20iterable%0D%0Acollections,%20so%20for%20elem%20in%20LST,%20and%20LST%20is%0D%0A%0D%0A00:10:37.441%20--%3E%2000:10:41.820%0D%0Abasically%20the%20list%20that%20we%20want%20to%0D%0Acalculate%20the%20average%20of%20the%20elements%20in,%0D%0A%0D%0A00:10:41.821%20--%3E%2000:10:55.260%0D%0Aso%20for%20elem%20in%20LST,%20sum%20elems%20plus%20equals%0D%0Athis%20current%20element.%20So%20first%20iteration,%0D%0A%0D%0A00:10:55.261%20--%3E%2000:11:00.240%0D%0Aelem%20would%20be%20the%20first%20element%20in%20the%0D%0Alist.%20Sum%20elems%20will%20add%20to%20that%20the%20first%0D%0A%0D%0A00:11:00.241%20--%3E%2000:11:05.000%0D%0Aelement.%20Second%20iteration,%20elem%20would%20be%0D%0Athe%20second%20element%20in%20the%20list%20and%20we\u0027ll%20add%0D%0A%0D%0A00:11:05.001%20--%3E%2000:11:10.970%0D%0Athis%20item%20to%20sum%20elems%20and%20so%20on.%20So%0D%0Asince%20we\u0027re%20iterating%20over%20all%20the%0D%0A%0D%0A00:11:10.971%20--%3E%2000:11:15.860%0D%0Aelements%20in%20the%20list%20using%20this%20for%20loop,%0D%0Awe\u0027ll%20accumulate%20the%20total%20sum%20and%0D%0A%0D%0A00:11:15.861%20--%3E%2000:11:29.620%0D%0Athen%20average%20would%20be%20the%20sum%20elements%0D%0A%0D%0A"}')