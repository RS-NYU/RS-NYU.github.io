window.globalProvideData('caption', '{"data":"WEBVTT%0D%0AKind:%20captions%0D%0ASource:%20Articulate%20Closed%20Captions%20Editor%0D%0ASource%20Version:%201.11.14249.0%0D%0A%0D%0A00:00:00.510%20--%3E%2000:00:05.490%0D%0AOkay,%20now%20that%20we\u0027ve%20seen%20how%20to%20create%20a%0D%0Anew%20list%20object%20with%20the%20square%20values,%0D%0A%0D%0A00:00:05.491%20--%3E%2000:00:11.429%0D%0Alet\u0027s%20see%20how%20we%20can%20mutate%0D%0Athe%20parameter%20list%20to%20contain%20the%20square%0D%0A%0D%0A00:00:11.430%20--%3E%2000:00:16.560%0D%0Avalues%20of%20the%20elements.%20Let\u0027s%20do%20the%0D%0Ain-place%20version%20of%20this%20square%0D%0A%0D%0A00:00:16.561%20--%3E%2000:00:22.019%0D%0Aoperation.%20So%20let\u0027s%20implement%20square%0D%0Alist%20in%20place%20that%20is%20given%20a%20list%0D%0A%0D%0A00:00:22.020%20--%3E%2000:00:28.470%0D%0Aobject,%20basically%20a%20reference%20to%20a%20list,%0D%0Aand%20it%20should%20modify%20the%20elements%20of%20the%0D%0A%0D%0A00:00:28.471%20--%3E%2000:00:35.370%0D%0Alist%20to%20be%20the%20square%20values.%20So%20we\u0027re%0D%0Anot%20gonna%20create%20any%20new%20list%20objects.%0D%0A%0D%0A00:00:35.371%20--%3E%2000:00:39.840%0D%0AWe\u0027re%20basically%20gonna%20iterate%20over%20the%0D%0Alist.%20So%20for%20example,%20for%20elem%20in%20LST.%20And%0D%0A%0D%0A00:00:39.841%20--%3E%2000:00:47.320%0D%0Athen%20let\u0027s%20just%20modify%20elem%20to%20be%20the%0D%0Asquare%20of%20elem,%20basically%20elem%20times%20elem.%0D%0A%0D%0A00:00:47.321%20--%3E%2000:00:53.590%0D%0AI%20think%20it%20makes%20sense,%20but%20then%20if%20you%0D%0Atry%20executing,%20it%20you\u0027ll%20see%20that%20it%0D%0A%0D%0A00:00:53.591%20--%3E%2000:00:59.620%0D%0Adoesn\u0027t%20really%20work,%20doesn\u0027t%20affect%20the%0D%0Alist.%20It%20doesn\u0027t%20square%20the%20list.%20Let%20me%0D%0A%0D%0A00:00:59.621%20--%3E%2000:01:04.629%0D%0Atry%20to%20explain%20why%20this%20thing%20here%0D%0Adoesn\u0027t%20work.%20So%20let\u0027s%20take%20a%20look%20at%20the%0D%0A%0D%0A00:01:04.630%20--%3E%2000:01:09.580%0D%0Aruntime%20stack,%20the%20memory%20of%20this%0D%0Aexecution.%20I%20think%20it%20would%20give%20us%20the%0D%0A%0D%0A00:01:09.581%20--%3E%2000:01:17.020%0D%0Abest%20understanding%20what%20goes%20wrong%20here%0D%0Aand%20then%20we\u0027ll%20try%20to%20fix%20it.%20So%20let\u0027s%0D%0A%0D%0A00:01:17.021%20--%3E%2000:01:21.190%0D%0Atake%20a%20look.%20So%20for%20example,%20we%20have%20our%0D%0Alist%20object,%20which%20is%20the%20list%20[1,%202,%203],%0D%0A%0D%0A00:01:21.191%20--%3E%2000:01:26.020%0D%0Aout%20of%20the%20scope%20of%20this%20function,%0D%0Ain%20some%20other%20position%20in%20a%20main%0D%0A%0D%0A00:01:26.021%20--%3E%2000:01:31.119%0D%0Afunction%20or%20some%20other%20function%20that%0D%0Acalls%20the%20square%20list%20in%20place.%20And%20then%0D%0A%0D%0A00:01:31.120%20--%3E%2000:01:37.420%0D%0Awhen%20this%20function%20is%20called,%20it%20uses%20two%0D%0Alocal%20variables:%20the%20parameter%20list%20LST%0D%0A%0D%0A00:01:37.421%20--%3E%2000:01:43.660%0D%0Aand%20a%20local%20variable%20elem%20that%20allows%20us%0D%0Ato%20iterate,%20that%20stores%20the%20values%20we%0D%0A%0D%0A00:01:43.661%20--%3E%2000:01:50.590%0D%0Aiterate%20over.%20So%20initially%20LST%20is%0D%0Ainitialized%20to%20the%20calling%20object,%20which%0D%0A%0D%0A00:01:50.591%20--%3E%2000:01:56.950%0D%0Ais%20basic,%20and%20then%20let\u0027s%20see%20what%20the%20for%0D%0Aloop%20here%20does%20and%20why%20doesn\u0027t%20it%20affect%0D%0A%0D%0A00:01:56.951%20--%3E%2000:02:05.020%0D%0Athe%20list%20as%20we%20kind%20of%20think%20it%20should.%0D%0ASo%20the%20first%20value%20elem%20gets%20a%20reference%20to%0D%0A%0D%0A00:02:05.021%20--%3E%2000:02:10.630%0D%0Athe%20first%20element%20of%20the%20list,%20basically%0D%0Apointing%20to%201.%20Then%20we%20execute%20the%20body,%0D%0A%0D%0A00:02:10.631%20--%3E%2000:02:17.650%0D%0Abasically%20setting%20elem%20to%20be%20elem%20x%20elem,%20so%0D%0Asince%20elem%20is%201,%20first%20we%20calculate%201%0D%0A%0D%0A00:02:17.651%20--%3E%2000:02:25.959%0D%0Atimes%201.%20That%20is%201.%20And%20then%20we%20set%20elem%20to%0D%0Abe%201.%20So%20instead%20of%20elem%20referencing%20the%0D%0A%0D%0A00:02:25.960%20--%3E%2000:02:30.400%0D%0Afirst%20element%20of%20the%20list,%0D%0Aelem%20would%20now%20reference%20the%201%20that%20was%0D%0A%0D%0A00:02:30.401%20--%3E%2000:02:37.620%0D%0Acalculated%20when%20we%20multiplied%201%20by%201.%20So%0D%0Aelem%20points%20to%20this%201.%20Okay,%0D%0A%0D%0A00:02:37.621%20--%3E%2000:02:42.540%0D%0Aseems%20like%20it%20didn\u0027t%20change%20the%20list.%20It%0D%0Adefinitely%20pointed%20to%201.%20And%20then%20elem%0D%0A%0D%0A00:02:42.541%20--%3E%2000:02:47.819%0D%0Awould%20iterate%20to%20the%20next%20element%20of%20the%0D%0Alist,%20so%20elem%20would%20point%20to%202.%20We\u0027ll%0D%0A%0D%0A00:02:47.820%20--%3E%2000:02:52.110%0D%0Aexecute%20elem%20equals%20elem%20x%20elem.%20We\u0027ll%0D%0Acalculate%202%20x%202,%20that%20would%20be%0D%0A%0D%0A00:02:52.111%20--%3E%2000:02:59.340%0D%0A4,%20and%20elem%20would%20point%20to%20that%204.%0D%0AAgain%20not%20changing%20any%20of%20the%20values.%0D%0A%0D%0A00:02:59.341%20--%3E%2000:03:06.510%0D%0AThe%20reference%20where%20elem%20points%20to%0D%0Achanges.%20Instead%20of%20referencing%202,%20it%20now%0D%0A%0D%0A00:03:06.511%20--%3E%2000:03:12.590%0D%0Areferences%20to%204,%20but%20it%20doesn\u0027t%20change%0D%0Athe%20reference%20inside%20the%20list%0D%0A%0D%0A00:03:12.591%20--%3E%2000:03:17.069%0D%0Apositions%20to%20reference%20to%20different%0D%0Avalues.%20Same%20thing%20in%20the%20last%20iteration.%0D%0A%0D%0A00:03:17.070%20--%3E%2000:03:23.310%0D%0AElem%20references%203%20and%20once%20again%20we%0D%0Achange%20elem%20to%20reference%20to%209.%20Again,%0D%0A%0D%0A00:03:23.311%20--%3E%2000:03:29.910%0D%0Anot%20affecting%20the%20list.%20So%20yeah,%20so%20that%0D%0Adefinitely%20is%20not%20how%20it%20should%0D%0A%0D%0A00:03:29.911%20--%3E%2000:03:35.819%0D%0Awork.%20When%20the%20function%20here%20ends,%20LST%0D%0Aremains%20with%20the%20original%20values%20of%201,%0D%0A%0D%0A00:03:35.820%20--%3E%2000:03:42.000%0D%0A2,%20and%203.%20Let\u0027s%20think%20what%20we%20should%0D%0Ado%20different%20in%20order%20for%20our%20function%0D%0A%0D%0A00:03:42.001%20--%3E%2000:03:50.340%0D%0Ato%20affect%20the%20list.%20So%20we%20should%20probably%0D%0Ause%20some%20of%20the%20operations%0D%0A%0D%0A00:03:50.341%20--%3E%2000:03:55.590%0D%0Athat%20mutate%20the%20list.%20We%20don\u0027t%20want%20to%0D%0Aappend,%20we%20don\u0027t%20want%20to%20insert,%20we%20don\u0027t%0D%0A%0D%0A00:03:55.591%20--%3E%2000:04:01.980%0D%0Awant%20to%20pop%20anything,%20because%20the%0D%0Alist%20should%20remain%20with%20the%20same%20three%0D%0A%0D%0A00:04:01.981%20--%3E%2000:04:07.769%0D%0Aelements%20that%20were%20first%20in%20there.%20Just%0D%0Athe%20values%20should%20change.%20So%20I%20was%0D%0A%0D%0A00:04:07.770%20--%3E%2000:04:12.480%0D%0Athinking%20maybe%20we%20should%20use%20an%0D%0Aassignment%20to%20change%20the%20first%20element%0D%0A%0D%0A00:04:12.481%20--%3E%2000:04:16.109%0D%0Ain%20the%20list%20instead%20of%20pointing%20to...%0D%0Aactually%20with%20one%20should%20remain%20the%20same,%0D%0A%0D%0A00:04:16.110%20--%3E%2000:04:19.829%0D%0Abut%20the%20second%20element%20in%20the%20list,%0D%0Ainstead%20of%20referencing%20to%202,%20to%0D%0A%0D%0A00:04:19.830%20--%3E%2000:04:24.840%0D%0Areference%20to%204.%20In%20order%20to%20change%0D%0Avalues%20in%20list%20positions,%20we%20typically%0D%0A%0D%0A00:04:24.841%20--%3E%2000:04:31.860%0D%0Ause%20indexed%20assignments.%20So%20that%20brings%0D%0Ame%20to%20think%20maybe%20instead%20of%20iterating%0D%0A%0D%0A00:04:31.861%20--%3E%2000:04:37.169%0D%0Aover%20the%20elements%20of%20the%20list,%0D%0Amaybe%20we%20can%20iterate%20over%20the%20indices%20of%0D%0A%0D%0A00:04:37.170%20--%3E%2000:04:45.120%0D%0Athe%20list,%20and%20then%20use%20these%20positions%20to%0D%0Aaccess%20the%20places%20in%20the%20list%20and%0D%0A%0D%0A00:04:45.121%20--%3E%2000:04:51.120%0D%0Amodify%20the%20value%20of%20referencing%20from%20one%0D%0Aposition%20from%20one%20element%20to%20referencing%0D%0A%0D%0A00:04:51.121%20--%3E%2000:04:53.940%0D%0Ato%20another%20element.%20Let%20me%20show%20you%20how%0D%0A%0D%0A00:04:53.941%20--%3E%2000:04:58.890%0D%0Athat%20would%20work.%20So%20when%20we\u0027re%20defining%0D%0Athe%20square%20list%20in%20place%20function,%20we\u0027ll%0D%0A%0D%0A00:04:58.891%20--%3E%2000:05:06.720%0D%0Aiterate%20for%20i%20in%20range%20of%20length%20s,%20so%0D%0Afor%20example%20if%20our%20list%20is%20[1,%202,%203],%20range%0D%0A%0D%0A00:05:06.721%20--%3E%2000:05:11.610%0D%0Aof%20length%20s%20would%20be%20[0,%201,%202],%20which%20is%0D%0Aobviously%20the%20range%20of%20the%20indices%20of%0D%0A%0D%0A00:05:11.611%20--%3E%2000:05:16.560%0D%0Athe%20list.%20So%20first%20iteration%20i%20would%20be%200.%0D%0AThat%20would%20allow%20us%20to%20access%20the%20first%0D%0A%0D%0A00:05:16.561%20--%3E%2000:05:21.420%0D%0Aelement%20in%20the%20list%20and%20modify%20its%20value.%0D%0ASecond%20iteration,%20i%20would%20be%201.%20That%20will%0D%0A%0D%0A00:05:21.421%20--%3E%2000:05:24.810%0D%0Aallow%20us%20to%20access%20the%20second%20element%20in%0D%0Athe%20list%20and%20modify%20its%20value.%20And%0D%0A%0D%0A00:05:24.811%20--%3E%2000:05:29.070%0D%0Athird%20iteration,%20i%20would%20be%202.%20That%20will%0D%0Aallow%20us%20to%20access%20the%20third%20element%20in%0D%0A%0D%0A00:05:29.071%20--%3E%2000:05:34.320%0D%0Athe%20list%20and%20modify%20its%20value.%0D%0ASo%20by%20ranging%20over%20the%20indices%20and%20using%0D%0A%0D%0A00:05:34.321%20--%3E%2000:05:39.390%0D%0Athese%20indices%20in%20order%20to%20modify%20the%0D%0Avalues,%20it%20would%20allow%20us%20to%20affect%20and%0D%0A%0D%0A00:05:39.391%20--%3E%2000:05:45.570%0D%0Amutate%20the%20list.%20Therefore%20the%20body%20of%0D%0Athe%20for%20loop%20here%20would%0D%0A%0D%0A00:05:45.571%20--%3E%2000:05:52.410%0D%0Abe%20LST%20i%20would%20be%20the%20square%20of%20LSD%20i,%0D%0Abasically%20LST%20i%20equals%20LST%20i%20x%20LST%20i.%0D%0A%0D%0A00:05:52.411%20--%3E%2000:05:57.870%0D%0ASo%20we%20are%20accessing%20the%20LST%20i%20position.%0D%0ASorry,%20we\u0027re%20accessing%20the%20ith%0D%0A%0D%0A00:05:57.871%20--%3E%2000:06:06.360%0D%0Aposition%20in%20order%20to%20read%20the%20values,%20so%0D%0Awe%20would%20know%20what%20value%20we%20want%20to%20put%0D%0A%0D%0A00:06:06.361%20--%3E%2000:06:12.810%0D%0Ain%20or%20replace%20LST%20i%20with,%20that%20is%20LST%20i%0D%0Ax%20LST%20i,%20and%20then%20we\u0027re%20setting%20LST%20i%0D%0A%0D%0A00:06:12.811%20--%3E%2000:06:18.530%0D%0Awith%20this%20new%20value.%20Let\u0027s%20take%20a%20look%0D%0Ahow%20it%20behaves%20in%20in%20the%20memory,%20why%20that%0D%0A%0D%0A00:06:18.531%20--%3E%2000:06:24.270%0D%0Aimplementation%20does%20affect%20the%20calling%0D%0Aobject,%20does%20affect%20the%20list%20that%0D%0A%0D%0A00:06:24.271%20--%3E%2000:06:29.360%0D%0Apasses%20as%20a%20parameter.%20Once%20again,%20we%20have%0D%0Aa%20list%20object%20with%20[1,%202,%203]%0D%0A%0D%0A00:06:29.361%20--%3E%2000:06:37.010%0D%0Asomewhere%20in%20the%20main%20function%20or%0D%0Ain%20some%20other%20calling%20function,%20and%20then%0D%0A%0D%0A00:06:37.011%20--%3E%2000:06:43.350%0D%0Ainternally%20for%20this%20function%20we%20have%20the%0D%0ALST%20and,%20in%20this%20case,%20i%20as%20local%0D%0A%0D%0A00:06:43.351%20--%3E%2000:06:47.520%0D%0Avariables.%20LST%20is%20initialized%20to%0D%0Areference%20the%20original%20list%20that%20we%0D%0A%0D%0A00:06:47.521%20--%3E%2000:06:55.740%0D%0Awanted%20to%20change%20the%20data%20in,%20and%20we%0D%0Ause%20i,%20the%20indices,%20to%20allow%20us%20to%20make%0D%0A%0D%0A00:06:55.741%20--%3E%2000:06:59.690%0D%0Athese%20changes.%0D%0ASo%20first%20iteration,%20as%20we%20said,%20i%20would%20be%0D%0A%0D%0A00:06:59.691%20--%3E%2000:07:05.280%0D%0A0,%20right?%20So%20we%20have%20i%20referencing%200%20and%0D%0Athen%0D%0A%0D%0A00:07:05.281%20--%3E%2000:07:13.320%0D%0Awe\u0027re%20having%20LST%200%20equals%20LST%200%20times%0D%0ALST%200.%20LST%200%20is%20basically%201.%201%20times%201%0D%0A%0D%0A00:07:13.321%20--%3E%2000:07:19.250%0D%0Ais%201,%20and%20then%20we\u0027re%20setting%20LST%200%20to%20be%0D%0A1.%0D%0A%0D%0A00:07:19.251%20--%3E%2000:07:24.560%0D%0ADoesn\u0027t%20do%20a%20lot%20because%20it%20was%201%0D%0Abefore,%20but%20you%20see%20it%20references%20a%20new%0D%0A%0D%0A00:07:24.561%20--%3E%2000:07:32.880%0D%0Ainstance%20of%201.%20When%20i%20would%20advance%20and%0D%0Abe%201,%20now%20the%20change%0D%0A%0D%0A00:07:32.881%20--%3E%2000:07:40.800%0D%0Awould%20be%20more%20visible.%20Once%20again,%20we\u0027re%0D%0Aevaluating%20LST%201%20equals%20LST%201%20times%20LST%201.%0D%0A%0D%0A00:07:40.801%20--%3E%2000:07:48.530%0D%0ALST%201%20is%202,%20so%202%20times%202%20is%204,%20and%0D%0Athen%20we\u0027re%20setting%20LST%201%20to%20be%204.%20So%0D%0A%0D%0A00:07:48.531%20--%3E%2000:07:55.620%0D%0Ainstead%20of%20referencing%202,%20LST%201%20now%0D%0Areferences%204.%20So%20by%20accessing%20LST%201,%20we%0D%0A%0D%0A00:07:55.621%20--%3E%2000:08:01.830%0D%0Aare%20modifying%20the%20data%20that%20is%0D%0Areferenced%20by%20the%20second%20element%20in%20the%0D%0A%0D%0A00:08:01.831%20--%3E%2000:08:06.030%0D%0Alist%20from%20one%20value%20to%20another.%20So%0D%0Ainstead%20of%20referencing%202,%20now%20it%0D%0A%0D%0A00:08:06.031%20--%3E%2000:08:12.990%0D%0Areferences%204.%20So%20now%20that%20changed,%0D%0Athat%20updated,%20our%20calling%20object%20with%201%0D%0A%0D%0A00:08:12.991%20--%3E%2000:08:19.740%0D%0Aand%204.%20And%20eventually%20third%20iteration,%20i%20is%0D%0A2,%20and%20then%20we\u0027re%20setting%20LST%202%20to%20be,%0D%0A%0D%0A00:08:19.741%20--%3E%2000:08:28.680%0D%0Ain%20this%20case%203%20times%203.%20That%20would%20modify%0D%0ALST%202%20to%20reference%209%20in%20that%20case.%20Once%0D%0A%0D%0A00:08:28.681%20--%3E%2000:08:35.550%0D%0Athis%20function%20ends,%20the%20the%20local%20frame%0D%0Awould%20be%20popped%20out%20of%20the%20stack%20and%20the%0D%0A%0D%0A00:08:35.551%20--%3E%2000:08:41.790%0D%0Acalling%20object%20would%20remain%20with%20the%0D%0Achanges%20that%20we%20made%20during%20the%0D%0A%0D%0A00:08:41.791%20--%3E%2000:08:47.460%0D%0Aexecution%20of%20the%20function.%20So%20the%0D%0Aoriginal%20list%20changed%20and%20mutated%20from%0D%0A%0D%0A00:08:47.461%20--%3E%2000:08:54.150%0D%0A[1,%202,%203]%20to%20be%20[1,%204,%209].%20And%20that\u0027s%20exactly%0D%0Awhat%20we%20intended%20to%20do.%20So%20a%20lot%20of%20times%0D%0A%0D%0A00:08:54.151%20--%3E%2000:09:00.180%0D%0Awhen%20you%20have%20to%20mutate%20a%20list,%20you\u0027ll%0D%0Aprobably%20prefer%20to%20iterate%20over%20the%0D%0A%0D%0A00:09:00.181%20--%3E%2000:09:06.000%0D%0Aindices%20that%20allow%20you%20to%20access%20and%0D%0Amodify%20these%20positions%20instead%20of%20just%0D%0A%0D%0A"}')